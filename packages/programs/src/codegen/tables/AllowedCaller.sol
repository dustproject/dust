// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals

import { Bytes } from "@latticexyz/store/src/Bytes.sol";

import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";

// Import user types
import { EntityId } from "@dust/world/src/EntityId.sol";

library AllowedCaller {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "default-1", name: "AllowedCaller", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746264656661756c742d310000000000416c6c6f77656443616c6c6572000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0001010001000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool)
  Schema constant _valueSchema = Schema.wrap(0x0001010060000000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "itemId";
    keyNames[1] = "caller";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](1);
    fieldNames[0] = "allowed";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get allowed.
   */
  function getAllowed(bytes32 itemId, EntityId caller) internal view returns (bool allowed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get allowed.
   */
  function _getAllowed(bytes32 itemId, EntityId caller) internal view returns (bool allowed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get allowed.
   */
  function get(bytes32 itemId, EntityId caller) internal view returns (bool allowed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get allowed.
   */
  function _get(bytes32 itemId, EntityId caller) internal view returns (bool allowed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set allowed.
   */
  function setAllowed(bytes32 itemId, EntityId caller, bool allowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allowed)), _fieldLayout);
  }

  /**
   * @notice Set allowed.
   */
  function _setAllowed(bytes32 itemId, EntityId caller, bool allowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allowed)), _fieldLayout);
  }

  /**
   * @notice Set allowed.
   */
  function set(bytes32 itemId, EntityId caller, bool allowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allowed)), _fieldLayout);
  }

  /**
   * @notice Set allowed.
   */
  function _set(bytes32 itemId, EntityId caller, bool allowed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allowed)), _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 itemId, EntityId caller) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 itemId, EntityId caller) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(bool allowed) internal pure returns (bytes memory) {
    return abi.encodePacked(allowed);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(bool allowed) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(allowed);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 itemId, EntityId caller) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = itemId;
    _keyTuple[1] = EntityId.unwrap(caller);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
