// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { DefaultProgramSystem } from "../../DefaultProgramSystem.sol";
import { EntityId } from "@dust/world/src/types/EntityId.sol";

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";

type DefaultProgramSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "dfprograms_1", name: "DefaultProgramSy" }))
DefaultProgramSystemType constant defaultProgramSystem =
  DefaultProgramSystemType.wrap(0x7379646670726f6772616d735f31000044656661756c7450726f6772616d5379);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title DefaultProgramSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library DefaultProgramSystemLib {
  error DefaultProgramSystemLib_CallingFromRootSystem();

  function newAccessGroup(DefaultProgramSystemType self, EntityId owner) internal returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0)).newAccessGroup(owner);
  }

  function setAccessGroup(DefaultProgramSystemType self, EntityId caller, EntityId target, uint256 groupId) internal {
    return CallWrapper(self.toResourceId(), address(0)).setAccessGroup(caller, target, groupId);
  }

  function setAccessGroup(DefaultProgramSystemType self, EntityId caller, address groupOwner) internal {
    return CallWrapper(self.toResourceId(), address(0)).setAccessGroup(caller, groupOwner);
  }

  function setMembership(DefaultProgramSystemType self, EntityId caller, uint256 groupId, EntityId member, bool allowed)
    internal
  {
    return CallWrapper(self.toResourceId(), address(0)).setMembership(caller, groupId, member, allowed);
  }

  function setMembership(DefaultProgramSystemType self, EntityId caller, uint256 groupId, address member, bool allowed)
    internal
  {
    return CallWrapper(self.toResourceId(), address(0)).setMembership(caller, groupId, member, allowed);
  }

  function setMembership(DefaultProgramSystemType self, EntityId caller, EntityId target, EntityId member, bool allowed)
    internal
  {
    return CallWrapper(self.toResourceId(), address(0)).setMembership(caller, target, member, allowed);
  }

  function setMembership(DefaultProgramSystemType self, EntityId caller, EntityId target, address member, bool allowed)
    internal
  {
    return CallWrapper(self.toResourceId(), address(0)).setMembership(caller, target, member, allowed);
  }

  function setOwner(DefaultProgramSystemType self, EntityId caller, uint256 groupId, EntityId newOwner) internal {
    return CallWrapper(self.toResourceId(), address(0)).setOwner(caller, groupId, newOwner);
  }

  function setTextSignContent(DefaultProgramSystemType self, EntityId caller, EntityId target, string memory content)
    internal
  {
    return CallWrapper(self.toResourceId(), address(0)).setTextSignContent(caller, target, content);
  }

  function getEntityGroupId(DefaultProgramSystemType self, EntityId target)
    internal
    view
    returns (uint256 groupId, bool defaultDeny)
  {
    return CallWrapper(self.toResourceId(), address(0)).getEntityGroupId(target);
  }

  function newAccessGroup(CallWrapper memory self, EntityId owner) internal returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_newAccessGroup_EntityId.newAccessGroup, (owner));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function setAccessGroup(CallWrapper memory self, EntityId caller, EntityId target, uint256 groupId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setAccessGroup_EntityId_EntityId_uint256.setAccessGroup, (caller, target, groupId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setAccessGroup(CallWrapper memory self, EntityId caller, address groupOwner) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setAccessGroup_EntityId_address.setAccessGroup, (caller, groupOwner));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setMembership(CallWrapper memory self, EntityId caller, uint256 groupId, EntityId member, bool allowed)
    internal
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_uint256_EntityId_bool.setMembership, (caller, groupId, member, allowed));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setMembership(CallWrapper memory self, EntityId caller, uint256 groupId, address member, bool allowed)
    internal
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_uint256_address_bool.setMembership, (caller, groupId, member, allowed));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setMembership(CallWrapper memory self, EntityId caller, EntityId target, EntityId member, bool allowed)
    internal
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_EntityId_EntityId_bool.setMembership, (caller, target, member, allowed));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setMembership(CallWrapper memory self, EntityId caller, EntityId target, address member, bool allowed)
    internal
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_EntityId_address_bool.setMembership, (caller, target, member, allowed));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setOwner(CallWrapper memory self, EntityId caller, uint256 groupId, EntityId newOwner) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setOwner_EntityId_uint256_EntityId.setOwner, (caller, groupId, newOwner));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTextSignContent(CallWrapper memory self, EntityId caller, EntityId target, string memory content)
    internal
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall =
      abi.encodeCall(_setTextSignContent_EntityId_EntityId_string.setTextSignContent, (caller, target, content));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getEntityGroupId(CallWrapper memory self, EntityId target)
    internal
    view
    returns (uint256 groupId, bool defaultDeny)
  {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DefaultProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getEntityGroupId_EntityId.getEntityGroupId, (target));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256, bool));
  }

  function newAccessGroup(RootCallWrapper memory self, EntityId owner) internal returns (uint256) {
    bytes memory systemCall = abi.encodeCall(_newAccessGroup_EntityId.newAccessGroup, (owner));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (uint256));
  }

  function setAccessGroup(RootCallWrapper memory self, EntityId caller, EntityId target, uint256 groupId) internal {
    bytes memory systemCall =
      abi.encodeCall(_setAccessGroup_EntityId_EntityId_uint256.setAccessGroup, (caller, target, groupId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setAccessGroup(RootCallWrapper memory self, EntityId caller, address groupOwner) internal {
    bytes memory systemCall = abi.encodeCall(_setAccessGroup_EntityId_address.setAccessGroup, (caller, groupOwner));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setMembership(RootCallWrapper memory self, EntityId caller, uint256 groupId, EntityId member, bool allowed)
    internal
  {
    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_uint256_EntityId_bool.setMembership, (caller, groupId, member, allowed));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setMembership(RootCallWrapper memory self, EntityId caller, uint256 groupId, address member, bool allowed)
    internal
  {
    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_uint256_address_bool.setMembership, (caller, groupId, member, allowed));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setMembership(RootCallWrapper memory self, EntityId caller, EntityId target, EntityId member, bool allowed)
    internal
  {
    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_EntityId_EntityId_bool.setMembership, (caller, target, member, allowed));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setMembership(RootCallWrapper memory self, EntityId caller, EntityId target, address member, bool allowed)
    internal
  {
    bytes memory systemCall =
      abi.encodeCall(_setMembership_EntityId_EntityId_address_bool.setMembership, (caller, target, member, allowed));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setOwner(RootCallWrapper memory self, EntityId caller, uint256 groupId, EntityId newOwner) internal {
    bytes memory systemCall = abi.encodeCall(_setOwner_EntityId_uint256_EntityId.setOwner, (caller, groupId, newOwner));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setTextSignContent(RootCallWrapper memory self, EntityId caller, EntityId target, string memory content)
    internal
  {
    bytes memory systemCall =
      abi.encodeCall(_setTextSignContent_EntityId_EntityId_string.setTextSignContent, (caller, target, content));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getEntityGroupId(RootCallWrapper memory self, EntityId target)
    internal
    view
    returns (uint256 groupId, bool defaultDeny)
  {
    bytes memory systemCall = abi.encodeCall(_getEntityGroupId_EntityId.getEntityGroupId, (target));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256, bool));
  }

  function callFrom(DefaultProgramSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(DefaultProgramSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(DefaultProgramSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(DefaultProgramSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(DefaultProgramSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (DefaultProgramSystemType) {
    return DefaultProgramSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(DefaultProgramSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */
interface _newAccessGroup_EntityId {
  function newAccessGroup(EntityId owner) external;
}

interface _setAccessGroup_EntityId_EntityId_uint256 {
  function setAccessGroup(EntityId caller, EntityId target, uint256 groupId) external;
}

interface _setAccessGroup_EntityId_address {
  function setAccessGroup(EntityId caller, address groupOwner) external;
}

interface _setMembership_EntityId_uint256_EntityId_bool {
  function setMembership(EntityId caller, uint256 groupId, EntityId member, bool allowed) external;
}

interface _setMembership_EntityId_uint256_address_bool {
  function setMembership(EntityId caller, uint256 groupId, address member, bool allowed) external;
}

interface _setMembership_EntityId_EntityId_EntityId_bool {
  function setMembership(EntityId caller, EntityId target, EntityId member, bool allowed) external;
}

interface _setMembership_EntityId_EntityId_address_bool {
  function setMembership(EntityId caller, EntityId target, address member, bool allowed) external;
}

interface _setOwner_EntityId_uint256_EntityId {
  function setOwner(EntityId caller, uint256 groupId, EntityId newOwner) external;
}

interface _setTextSignContent_EntityId_EntityId_string {
  function setTextSignContent(EntityId caller, EntityId target, string memory content) external;
}

interface _getEntityGroupId_EntityId {
  function getEntityGroupId(EntityId target) external;
}

using DefaultProgramSystemLib for DefaultProgramSystemType global;
using DefaultProgramSystemLib for CallWrapper global;
using DefaultProgramSystemLib for RootCallWrapper global;
