// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { BuildSystem } from "../../systems/BuildSystem.sol";
import { EntityId } from "../../EntityId.sol";
import { Vec3, Orientation } from "../../Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BuildSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "BuildSystem" }))
BuildSystemType constant buildSystem = BuildSystemType.wrap(
  0x737900000000000000000000000000004275696c6453797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title BuildSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BuildSystemLib {
  error BuildSystemLib_CallingFromRootSystem();

  function build(
    BuildSystemType self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    return CallWrapper(self.toResourceId(), address(0)).build(caller, coord, slot, extraData);
  }

  function buildWithOrientation(
    BuildSystemType self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    return
      CallWrapper(self.toResourceId(), address(0)).buildWithOrientation(caller, coord, slot, orientation, extraData);
  }

  function jumpBuildWithOrientation(
    BuildSystemType self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    return CallWrapper(self.toResourceId(), address(0)).jumpBuildWithOrientation(caller, slot, orientation, extraData);
  }

  function jumpBuild(
    BuildSystemType self,
    EntityId caller,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    return CallWrapper(self.toResourceId(), address(0)).jumpBuild(caller, slot, extraData);
  }

  function build(
    CallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BuildSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_build_EntityId_Vec3_uint16_bytes.build, (caller, coord, slot, extraData));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function buildWithOrientation(
    CallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BuildSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _buildWithOrientation_EntityId_Vec3_uint16_Orientation_bytes.buildWithOrientation,
      (caller, coord, slot, orientation, extraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildWithOrientation(
    CallWrapper memory self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BuildSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _jumpBuildWithOrientation_EntityId_uint16_Orientation_bytes.jumpBuildWithOrientation,
      (caller, slot, orientation, extraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function jumpBuild(
    CallWrapper memory self,
    EntityId caller,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BuildSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_jumpBuild_EntityId_uint16_bytes.jumpBuild, (caller, slot, extraData));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function build(
    RootCallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(_build_EntityId_Vec3_uint16_bytes.build, (caller, coord, slot, extraData));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function buildWithOrientation(
    RootCallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _buildWithOrientation_EntityId_Vec3_uint16_Orientation_bytes.buildWithOrientation,
      (caller, coord, slot, orientation, extraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildWithOrientation(
    RootCallWrapper memory self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _jumpBuildWithOrientation_EntityId_uint16_Orientation_bytes.jumpBuildWithOrientation,
      (caller, slot, orientation, extraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function jumpBuild(
    RootCallWrapper memory self,
    EntityId caller,
    uint16 slot,
    bytes memory extraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(_jumpBuild_EntityId_uint16_bytes.jumpBuild, (caller, slot, extraData));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function callFrom(BuildSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(BuildSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(BuildSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(BuildSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(BuildSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BuildSystemType) {
    return BuildSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(BuildSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _build_EntityId_Vec3_uint16_bytes {
  function build(EntityId caller, Vec3 coord, uint16 slot, bytes memory extraData) external;
}

interface _buildWithOrientation_EntityId_Vec3_uint16_Orientation_bytes {
  function buildWithOrientation(
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) external;
}

interface _jumpBuildWithOrientation_EntityId_uint16_Orientation_bytes {
  function jumpBuildWithOrientation(
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    bytes memory extraData
  ) external;
}

interface _jumpBuild_EntityId_uint16_bytes {
  function jumpBuild(EntityId caller, uint16 slot, bytes memory extraData) external;
}

using BuildSystemLib for BuildSystemType global;
using BuildSystemLib for CallWrapper global;
using BuildSystemLib for RootCallWrapper global;
