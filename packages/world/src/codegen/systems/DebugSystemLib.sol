// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { DebugSystem } from "../../systems/debug/DebugSystem.sol";
import { EntityId } from "../../types/EntityId.sol";
import { ObjectType } from "../../types/ObjectType.sol";
import { Vec3 } from "../../types/Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type DebugSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "DebugSystem" }))
DebugSystemType constant debugSystem = DebugSystemType.wrap(
  0x73790000000000000000000000000000446562756753797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title DebugSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library DebugSystemLib {
  error DebugSystemLib_CallingFromRootSystem();

  function debugAddToInventory(
    DebugSystemType self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToAdd
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).debugAddToInventory(owner, objectType, numObjectsToAdd);
  }

  function debugAddToolToInventory(
    DebugSystemType self,
    EntityId owner,
    ObjectType toolObjectType
  ) internal returns (EntityId) {
    return CallWrapper(self.toResourceId(), address(0)).debugAddToolToInventory(owner, toolObjectType);
  }

  function debugRemoveFromInventory(
    DebugSystemType self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToRemove
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).debugRemoveFromInventory(owner, objectType, numObjectsToRemove);
  }

  function debugRemoveToolFromInventory(DebugSystemType self, EntityId owner, EntityId tool) internal {
    return CallWrapper(self.toResourceId(), address(0)).debugRemoveToolFromInventory(owner, tool);
  }

  function debugTeleportPlayer(DebugSystemType self, address playerAddress, Vec3 finalCoord) internal {
    return CallWrapper(self.toResourceId(), address(0)).debugTeleportPlayer(playerAddress, finalCoord);
  }

  function debugAddToInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToAdd
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DebugSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _debugAddToInventory_EntityId_ObjectType_uint16.debugAddToInventory,
      (owner, objectType, numObjectsToAdd)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function debugAddToolToInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectType toolObjectType
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DebugSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _debugAddToolToInventory_EntityId_ObjectType.debugAddToolToInventory,
      (owner, toolObjectType)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function debugRemoveFromInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToRemove
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DebugSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _debugRemoveFromInventory_EntityId_ObjectType_uint16.debugRemoveFromInventory,
      (owner, objectType, numObjectsToRemove)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function debugRemoveToolFromInventory(CallWrapper memory self, EntityId owner, EntityId tool) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DebugSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _debugRemoveToolFromInventory_EntityId_EntityId.debugRemoveToolFromInventory,
      (owner, tool)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function debugTeleportPlayer(CallWrapper memory self, address playerAddress, Vec3 finalCoord) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DebugSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _debugTeleportPlayer_address_Vec3.debugTeleportPlayer,
      (playerAddress, finalCoord)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function debugAddToInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToAdd
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _debugAddToInventory_EntityId_ObjectType_uint16.debugAddToInventory,
      (owner, objectType, numObjectsToAdd)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function debugAddToolToInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectType toolObjectType
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _debugAddToolToInventory_EntityId_ObjectType.debugAddToolToInventory,
      (owner, toolObjectType)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function debugRemoveFromInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectType objectType,
    uint16 numObjectsToRemove
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _debugRemoveFromInventory_EntityId_ObjectType_uint16.debugRemoveFromInventory,
      (owner, objectType, numObjectsToRemove)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function debugRemoveToolFromInventory(RootCallWrapper memory self, EntityId owner, EntityId tool) internal {
    bytes memory systemCall = abi.encodeCall(
      _debugRemoveToolFromInventory_EntityId_EntityId.debugRemoveToolFromInventory,
      (owner, tool)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function debugTeleportPlayer(RootCallWrapper memory self, address playerAddress, Vec3 finalCoord) internal {
    bytes memory systemCall = abi.encodeCall(
      _debugTeleportPlayer_address_Vec3.debugTeleportPlayer,
      (playerAddress, finalCoord)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(DebugSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(DebugSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(DebugSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(DebugSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(DebugSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (DebugSystemType) {
    return DebugSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(DebugSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _debugAddToInventory_EntityId_ObjectType_uint16 {
  function debugAddToInventory(EntityId owner, ObjectType objectType, uint16 numObjectsToAdd) external;
}

interface _debugAddToolToInventory_EntityId_ObjectType {
  function debugAddToolToInventory(EntityId owner, ObjectType toolObjectType) external;
}

interface _debugRemoveFromInventory_EntityId_ObjectType_uint16 {
  function debugRemoveFromInventory(EntityId owner, ObjectType objectType, uint16 numObjectsToRemove) external;
}

interface _debugRemoveToolFromInventory_EntityId_EntityId {
  function debugRemoveToolFromInventory(EntityId owner, EntityId tool) external;
}

interface _debugTeleportPlayer_address_Vec3 {
  function debugTeleportPlayer(address playerAddress, Vec3 finalCoord) external;
}

using DebugSystemLib for DebugSystemType global;
using DebugSystemLib for CallWrapper global;
using DebugSystemLib for RootCallWrapper global;
