// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { InventorySystem } from "../../systems/InventorySystem.sol";
import { EntityId } from "../../types/EntityId.sol";
import { SlotAmount, SlotTransfer } from "../../utils/InventoryUtils.sol";
import { Vec3 } from "../../types/Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type InventorySystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "InventorySystem" }))
InventorySystemType constant inventorySystem = InventorySystemType.wrap(
  0x73790000000000000000000000000000496e76656e746f727953797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title InventorySystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library InventorySystemLib {
  error InventorySystemLib_CallingFromRootSystem();

  function drop(InventorySystemType self, EntityId caller, SlotAmount[] memory slots, Vec3 coord) internal {
    return CallWrapper(self.toResourceId(), address(0)).drop(caller, slots, coord);
  }

  function pickup(InventorySystemType self, EntityId caller, SlotTransfer[] memory slotTransfers, Vec3 coord) internal {
    return CallWrapper(self.toResourceId(), address(0)).pickup(caller, slotTransfers, coord);
  }

  function pickupAll(InventorySystemType self, EntityId caller, Vec3 coord) internal {
    return CallWrapper(self.toResourceId(), address(0)).pickupAll(caller, coord);
  }

  function drop(CallWrapper memory self, EntityId caller, SlotAmount[] memory slots, Vec3 coord) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert InventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_drop_EntityId_SlotAmountArray_Vec3.drop, (caller, slots, coord));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function pickup(CallWrapper memory self, EntityId caller, SlotTransfer[] memory slotTransfers, Vec3 coord) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert InventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _pickup_EntityId_SlotTransferArray_Vec3.pickup,
      (caller, slotTransfers, coord)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function pickupAll(CallWrapper memory self, EntityId caller, Vec3 coord) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert InventorySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_pickupAll_EntityId_Vec3.pickupAll, (caller, coord));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function drop(RootCallWrapper memory self, EntityId caller, SlotAmount[] memory slots, Vec3 coord) internal {
    bytes memory systemCall = abi.encodeCall(_drop_EntityId_SlotAmountArray_Vec3.drop, (caller, slots, coord));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function pickup(
    RootCallWrapper memory self,
    EntityId caller,
    SlotTransfer[] memory slotTransfers,
    Vec3 coord
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _pickup_EntityId_SlotTransferArray_Vec3.pickup,
      (caller, slotTransfers, coord)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function pickupAll(RootCallWrapper memory self, EntityId caller, Vec3 coord) internal {
    bytes memory systemCall = abi.encodeCall(_pickupAll_EntityId_Vec3.pickupAll, (caller, coord));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(InventorySystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(InventorySystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(InventorySystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(InventorySystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(InventorySystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (InventorySystemType) {
    return InventorySystemType.wrap(resourceId.unwrap());
  }

  function getAddress(InventorySystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _drop_EntityId_SlotAmountArray_Vec3 {
  function drop(EntityId caller, SlotAmount[] memory slots, Vec3 coord) external;
}

interface _pickup_EntityId_SlotTransferArray_Vec3 {
  function pickup(EntityId caller, SlotTransfer[] memory slotTransfers, Vec3 coord) external;
}

interface _pickupAll_EntityId_Vec3 {
  function pickupAll(EntityId caller, Vec3 coord) external;
}

using InventorySystemLib for InventorySystemType global;
using InventorySystemLib for CallWrapper global;
using InventorySystemLib for RootCallWrapper global;
