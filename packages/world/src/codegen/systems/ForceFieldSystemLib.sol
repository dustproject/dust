// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ForceFieldSystem } from "../../systems/ForceFieldSystem.sol";
import { Vec3 } from "../../types/Vec3.sol";
import { EntityId } from "../../types/EntityId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ForceFieldSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "ForceFieldSystem" }))
ForceFieldSystemType constant forceFieldSystem = ForceFieldSystemType.wrap(
  0x73790000000000000000000000000000466f7263654669656c6453797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ForceFieldSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ForceFieldSystemLib {
  error ForceFieldSystemLib_CallingFromRootSystem();

  function validateSpanningTree(
    ForceFieldSystemType self,
    Vec3[] memory boundary,
    uint8[] memory boundaryIdx,
    uint8[] memory parents
  ) internal view returns (bool __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).validateSpanningTree(boundary, boundaryIdx, parents);
  }

  function computeBoundaryFragments(
    ForceFieldSystemType self,
    EntityId forceField,
    Vec3 fragmentCoord
  ) internal view returns (Vec3[] memory __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).computeBoundaryFragments(forceField, fragmentCoord);
  }

  function addFragment(
    ForceFieldSystemType self,
    EntityId caller,
    EntityId forceField,
    Vec3 refFragmentCoord,
    Vec3 fragmentCoord,
    bytes memory extraData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).addFragment(
        caller,
        forceField,
        refFragmentCoord,
        fragmentCoord,
        extraData
      );
  }

  function removeFragment(
    ForceFieldSystemType self,
    EntityId caller,
    EntityId forceField,
    Vec3 fragmentCoord,
    uint8[] memory boundaryIdx,
    uint8[] memory parents,
    bytes memory extraData
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).removeFragment(
        caller,
        forceField,
        fragmentCoord,
        boundaryIdx,
        parents,
        extraData
      );
  }

  function validateSpanningTree(
    CallWrapper memory self,
    Vec3[] memory boundary,
    uint8[] memory boundaryIdx,
    uint8[] memory parents
  ) internal view returns (bool __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _validateSpanningTree_Vec3Array_uint8Array_uint8Array.validateSpanningTree,
      (boundary, boundaryIdx, parents)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bool));
    }
  }

  function computeBoundaryFragments(
    CallWrapper memory self,
    EntityId forceField,
    Vec3 fragmentCoord
  ) internal view returns (Vec3[] memory __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _computeBoundaryFragments_EntityId_Vec3.computeBoundaryFragments,
      (forceField, fragmentCoord)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (Vec3[]));
    }
  }

  function addFragment(
    CallWrapper memory self,
    EntityId caller,
    EntityId forceField,
    Vec3 refFragmentCoord,
    Vec3 fragmentCoord,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _addFragment_EntityId_EntityId_Vec3_Vec3_bytes.addFragment,
      (caller, forceField, refFragmentCoord, fragmentCoord, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeFragment(
    CallWrapper memory self,
    EntityId caller,
    EntityId forceField,
    Vec3 fragmentCoord,
    uint8[] memory boundaryIdx,
    uint8[] memory parents,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _removeFragment_EntityId_EntityId_Vec3_uint8Array_uint8Array_bytes.removeFragment,
      (caller, forceField, fragmentCoord, boundaryIdx, parents, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addFragment(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId forceField,
    Vec3 refFragmentCoord,
    Vec3 fragmentCoord,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _addFragment_EntityId_EntityId_Vec3_Vec3_bytes.addFragment,
      (caller, forceField, refFragmentCoord, fragmentCoord, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeFragment(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId forceField,
    Vec3 fragmentCoord,
    uint8[] memory boundaryIdx,
    uint8[] memory parents,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _removeFragment_EntityId_EntityId_Vec3_uint8Array_uint8Array_bytes.removeFragment,
      (caller, forceField, fragmentCoord, boundaryIdx, parents, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(ForceFieldSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ForceFieldSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ForceFieldSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ForceFieldSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ForceFieldSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ForceFieldSystemType) {
    return ForceFieldSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(ForceFieldSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _validateSpanningTree_Vec3Array_uint8Array_uint8Array {
  function validateSpanningTree(Vec3[] memory boundary, uint8[] memory boundaryIdx, uint8[] memory parents) external;
}

interface _computeBoundaryFragments_EntityId_Vec3 {
  function computeBoundaryFragments(EntityId forceField, Vec3 fragmentCoord) external;
}

interface _addFragment_EntityId_EntityId_Vec3_Vec3_bytes {
  function addFragment(
    EntityId caller,
    EntityId forceField,
    Vec3 refFragmentCoord,
    Vec3 fragmentCoord,
    bytes memory extraData
  ) external;
}

interface _removeFragment_EntityId_EntityId_Vec3_uint8Array_uint8Array_bytes {
  function removeFragment(
    EntityId caller,
    EntityId forceField,
    Vec3 fragmentCoord,
    uint8[] memory boundaryIdx,
    uint8[] memory parents,
    bytes memory extraData
  ) external;
}

using ForceFieldSystemLib for ForceFieldSystemType global;
using ForceFieldSystemLib for CallWrapper global;
using ForceFieldSystemLib for RootCallWrapper global;
