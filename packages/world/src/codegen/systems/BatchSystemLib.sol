// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { BatchSystem } from "../../systems/BatchSystem.sol";
import { EntityId } from "../../EntityId.sol";
import { Vec3 } from "../../Vec3.sol";
import { ProgramId } from "../../ProgramId.sol";
import { Orientation } from "../../Orientation.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type BatchSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "BatchSystem" }))
BatchSystemType constant batchSystem = BatchSystemType.wrap(
  0x73790000000000000000000000000000426174636853797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title BatchSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BatchSystemLib {
  error BatchSystemLib_CallingFromRootSystem();

  function buildAndAttachProgram(
    BatchSystemType self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    return
      CallWrapper(self.toResourceId(), address(0)).buildAndAttachProgram(
        caller,
        coord,
        slot,
        program,
        buildExtraData,
        attachExtraData
      );
  }

  function buildAndAttachProgramWithOrientation(
    BatchSystemType self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    return
      CallWrapper(self.toResourceId(), address(0)).buildAndAttachProgramWithOrientation(
        caller,
        coord,
        slot,
        orientation,
        program,
        buildExtraData,
        attachExtraData
      );
  }

  function jumpBuildAndAttachProgram(
    BatchSystemType self,
    EntityId caller,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    return
      CallWrapper(self.toResourceId(), address(0)).jumpBuildAndAttachProgram(
        caller,
        slot,
        program,
        buildExtraData,
        attachExtraData
      );
  }

  function jumpBuildWithOrientationAndAttachProgram(
    BatchSystemType self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    return
      CallWrapper(self.toResourceId(), address(0)).jumpBuildWithOrientationAndAttachProgram(
        caller,
        slot,
        orientation,
        program,
        buildExtraData,
        attachExtraData
      );
  }

  function buildAndAttachProgram(
    CallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _buildAndAttachProgram_EntityId_Vec3_uint16_ProgramId_bytes_bytes.buildAndAttachProgram,
      (caller, coord, slot, program, buildExtraData, attachExtraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function buildAndAttachProgramWithOrientation(
    CallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _buildAndAttachProgramWithOrientation_EntityId_Vec3_uint16_Orientation_ProgramId_bytes_bytes
        .buildAndAttachProgramWithOrientation,
      (caller, coord, slot, orientation, program, buildExtraData, attachExtraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildAndAttachProgram(
    CallWrapper memory self,
    EntityId caller,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _jumpBuildAndAttachProgram_EntityId_uint16_ProgramId_bytes_bytes.jumpBuildAndAttachProgram,
      (caller, slot, program, buildExtraData, attachExtraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildWithOrientationAndAttachProgram(
    CallWrapper memory self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert BatchSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _jumpBuildWithOrientationAndAttachProgram_EntityId_uint16_Orientation_ProgramId_bytes_bytes
        .jumpBuildWithOrientationAndAttachProgram,
      (caller, slot, orientation, program, buildExtraData, attachExtraData)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function buildAndAttachProgram(
    RootCallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _buildAndAttachProgram_EntityId_Vec3_uint16_ProgramId_bytes_bytes.buildAndAttachProgram,
      (caller, coord, slot, program, buildExtraData, attachExtraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function buildAndAttachProgramWithOrientation(
    RootCallWrapper memory self,
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _buildAndAttachProgramWithOrientation_EntityId_Vec3_uint16_Orientation_ProgramId_bytes_bytes
        .buildAndAttachProgramWithOrientation,
      (caller, coord, slot, orientation, program, buildExtraData, attachExtraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildAndAttachProgram(
    RootCallWrapper memory self,
    EntityId caller,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _jumpBuildAndAttachProgram_EntityId_uint16_ProgramId_bytes_bytes.jumpBuildAndAttachProgram,
      (caller, slot, program, buildExtraData, attachExtraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function jumpBuildWithOrientationAndAttachProgram(
    RootCallWrapper memory self,
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _jumpBuildWithOrientationAndAttachProgram_EntityId_uint16_Orientation_ProgramId_bytes_bytes
        .jumpBuildWithOrientationAndAttachProgram,
      (caller, slot, orientation, program, buildExtraData, attachExtraData)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function callFrom(BatchSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(BatchSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(BatchSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(BatchSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(BatchSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (BatchSystemType) {
    return BatchSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(BatchSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _buildAndAttachProgram_EntityId_Vec3_uint16_ProgramId_bytes_bytes {
  function buildAndAttachProgram(
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) external;
}

interface _buildAndAttachProgramWithOrientation_EntityId_Vec3_uint16_Orientation_ProgramId_bytes_bytes {
  function buildAndAttachProgramWithOrientation(
    EntityId caller,
    Vec3 coord,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) external;
}

interface _jumpBuildAndAttachProgram_EntityId_uint16_ProgramId_bytes_bytes {
  function jumpBuildAndAttachProgram(
    EntityId caller,
    uint16 slot,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) external;
}

interface _jumpBuildWithOrientationAndAttachProgram_EntityId_uint16_Orientation_ProgramId_bytes_bytes {
  function jumpBuildWithOrientationAndAttachProgram(
    EntityId caller,
    uint16 slot,
    Orientation orientation,
    ProgramId program,
    bytes memory buildExtraData,
    bytes memory attachExtraData
  ) external;
}

using BatchSystemLib for BatchSystemType global;
using BatchSystemLib for CallWrapper global;
using BatchSystemLib for RootCallWrapper global;
