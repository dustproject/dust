// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TransferSystem } from "../../systems/TransferSystem.sol";
import { EntityId } from "../../types/EntityId.sol";
import { SlotTransfer, SlotAmount } from "../../utils/InventoryUtils.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TransferSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "TransferSystem" }))
TransferSystemType constant transferSystem = TransferSystemType.wrap(
  0x737900000000000000000000000000005472616e7366657253797374656d0000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TransferSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TransferSystemLib {
  error TransferSystemLib_CallingFromRootSystem();

  function transfer(
    TransferSystemType self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotTransfer[] memory transfers,
    bytes memory extraData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).transfer(caller, from, to, transfers, extraData);
  }

  function transferAmounts(
    TransferSystemType self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotAmount[] memory amounts,
    bytes memory extraData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).transferAmounts(caller, from, to, amounts, extraData);
  }

  function transfer(
    CallWrapper memory self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotTransfer[] memory transfers,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TransferSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _transfer_EntityId_EntityId_EntityId_SlotTransferArray_bytes.transfer,
      (caller, from, to, transfers, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function transferAmounts(
    CallWrapper memory self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotAmount[] memory amounts,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TransferSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _transferAmounts_EntityId_EntityId_EntityId_SlotAmountArray_bytes.transferAmounts,
      (caller, from, to, amounts, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function transfer(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotTransfer[] memory transfers,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _transfer_EntityId_EntityId_EntityId_SlotTransferArray_bytes.transfer,
      (caller, from, to, transfers, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function transferAmounts(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotAmount[] memory amounts,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _transferAmounts_EntityId_EntityId_EntityId_SlotAmountArray_bytes.transferAmounts,
      (caller, from, to, amounts, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TransferSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TransferSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TransferSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TransferSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TransferSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TransferSystemType) {
    return TransferSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TransferSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _transfer_EntityId_EntityId_EntityId_SlotTransferArray_bytes {
  function transfer(
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotTransfer[] memory transfers,
    bytes memory extraData
  ) external;
}

interface _transferAmounts_EntityId_EntityId_EntityId_SlotAmountArray_bytes {
  function transferAmounts(
    EntityId caller,
    EntityId from,
    EntityId to,
    SlotAmount[] memory amounts,
    bytes memory extraData
  ) external;
}

using TransferSystemLib for TransferSystemType global;
using TransferSystemLib for CallWrapper global;
using TransferSystemLib for RootCallWrapper global;
