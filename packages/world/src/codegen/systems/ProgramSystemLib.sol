// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ProgramSystem } from "../../systems/ProgramSystem.sol";
import { EntityId } from "../../types/EntityId.sol";
import { ProgramId } from "../../types/ProgramId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ProgramSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "ProgramSystem" }))
ProgramSystemType constant programSystem = ProgramSystemType.wrap(
  0x7379000000000000000000000000000050726f6772616d53797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ProgramSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ProgramSystemLib {
  error ProgramSystemLib_CallingFromRootSystem();

  function updateProgram(
    ProgramSystemType self,
    EntityId caller,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateProgram(caller, target, newProgram, extraData);
  }

  function updateProgram(
    ProgramSystemType self,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateProgram(target, newProgram, extraData);
  }

  function attachProgram(
    ProgramSystemType self,
    EntityId caller,
    EntityId target,
    ProgramId program,
    bytes memory extraData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).attachProgram(caller, target, program, extraData);
  }

  function detachProgram(ProgramSystemType self, EntityId caller, EntityId target, bytes memory extraData) internal {
    return CallWrapper(self.toResourceId(), address(0)).detachProgram(caller, target, extraData);
  }

  function updateProgram(
    CallWrapper memory self,
    EntityId caller,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateProgram_EntityId_EntityId_ProgramId_bytes.updateProgram,
      (caller, target, newProgram, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateProgram(
    CallWrapper memory self,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _updateProgram_EntityId_ProgramId_bytes.updateProgram,
      (target, newProgram, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function attachProgram(
    CallWrapper memory self,
    EntityId caller,
    EntityId target,
    ProgramId program,
    bytes memory extraData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _attachProgram_EntityId_EntityId_ProgramId_bytes.attachProgram,
      (caller, target, program, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function detachProgram(CallWrapper memory self, EntityId caller, EntityId target, bytes memory extraData) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ProgramSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _detachProgram_EntityId_EntityId_bytes.detachProgram,
      (caller, target, extraData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateProgram(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateProgram_EntityId_EntityId_ProgramId_bytes.updateProgram,
      (caller, target, newProgram, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateProgram(
    RootCallWrapper memory self,
    EntityId target,
    ProgramId newProgram,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _updateProgram_EntityId_ProgramId_bytes.updateProgram,
      (target, newProgram, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function attachProgram(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId target,
    ProgramId program,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _attachProgram_EntityId_EntityId_ProgramId_bytes.attachProgram,
      (caller, target, program, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function detachProgram(
    RootCallWrapper memory self,
    EntityId caller,
    EntityId target,
    bytes memory extraData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _detachProgram_EntityId_EntityId_bytes.detachProgram,
      (caller, target, extraData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(ProgramSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ProgramSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ProgramSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ProgramSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ProgramSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ProgramSystemType) {
    return ProgramSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(ProgramSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _updateProgram_EntityId_EntityId_ProgramId_bytes {
  function updateProgram(EntityId caller, EntityId target, ProgramId newProgram, bytes memory extraData) external;
}

interface _updateProgram_EntityId_ProgramId_bytes {
  function updateProgram(EntityId target, ProgramId newProgram, bytes memory extraData) external;
}

interface _attachProgram_EntityId_EntityId_ProgramId_bytes {
  function attachProgram(EntityId caller, EntityId target, ProgramId program, bytes memory extraData) external;
}

interface _detachProgram_EntityId_EntityId_bytes {
  function detachProgram(EntityId caller, EntityId target, bytes memory extraData) external;
}

using ProgramSystemLib for ProgramSystemType global;
using ProgramSystemLib for CallWrapper global;
using ProgramSystemLib for RootCallWrapper global;
