// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TerrainSystem } from "../../systems/TerrainSystem.sol";
import { Vec3 } from "../../types/Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TerrainSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "TerrainSystem" }))
TerrainSystemType constant terrainSystem = TerrainSystemType.wrap(
  0x737900000000000000000000000000005465727261696e53797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TerrainSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TerrainSystemLib {
  error TerrainSystemLib_CallingFromRootSystem();

  function exploreChunk(
    TerrainSystemType self,
    Vec3 chunkCoord,
    bytes memory chunkData,
    bytes32[] memory merkleProof
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).exploreChunk(chunkCoord, chunkData, merkleProof);
  }

  function exploreRegionEnergy(
    TerrainSystemType self,
    Vec3 regionCoord,
    uint32 vegetationCount,
    bytes32[] memory merkleProof
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).exploreRegionEnergy(regionCoord, vegetationCount, merkleProof);
  }

  function exploreChunk(
    CallWrapper memory self,
    Vec3 chunkCoord,
    bytes memory chunkData,
    bytes32[] memory merkleProof
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TerrainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _exploreChunk_Vec3_bytes_bytes32Array.exploreChunk,
      (chunkCoord, chunkData, merkleProof)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function exploreRegionEnergy(
    CallWrapper memory self,
    Vec3 regionCoord,
    uint32 vegetationCount,
    bytes32[] memory merkleProof
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TerrainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _exploreRegionEnergy_Vec3_uint32_bytes32Array.exploreRegionEnergy,
      (regionCoord, vegetationCount, merkleProof)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function exploreChunk(
    RootCallWrapper memory self,
    Vec3 chunkCoord,
    bytes memory chunkData,
    bytes32[] memory merkleProof
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _exploreChunk_Vec3_bytes_bytes32Array.exploreChunk,
      (chunkCoord, chunkData, merkleProof)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function exploreRegionEnergy(
    RootCallWrapper memory self,
    Vec3 regionCoord,
    uint32 vegetationCount,
    bytes32[] memory merkleProof
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _exploreRegionEnergy_Vec3_uint32_bytes32Array.exploreRegionEnergy,
      (regionCoord, vegetationCount, merkleProof)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TerrainSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TerrainSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TerrainSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TerrainSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TerrainSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TerrainSystemType) {
    return TerrainSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TerrainSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _exploreChunk_Vec3_bytes_bytes32Array {
  function exploreChunk(Vec3 chunkCoord, bytes memory chunkData, bytes32[] memory merkleProof) external;
}

interface _exploreRegionEnergy_Vec3_uint32_bytes32Array {
  function exploreRegionEnergy(Vec3 regionCoord, uint32 vegetationCount, bytes32[] memory merkleProof) external;
}

using TerrainSystemLib for TerrainSystemType global;
using TerrainSystemLib for CallWrapper global;
using TerrainSystemLib for RootCallWrapper global;
