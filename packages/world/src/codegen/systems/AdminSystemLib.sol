// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AdminSystem } from "../../systems/admin/AdminSystem.sol";
import { EntityId } from "../../EntityId.sol";
import { ObjectTypeId } from "../../ObjectTypeId.sol";
import { Vec3 } from "../../Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AdminSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "AdminSystem" }))
AdminSystemType constant adminSystem = AdminSystemType.wrap(
  0x7379000000000000000000000000000041646d696e53797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AdminSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AdminSystemLib {
  error AdminSystemLib_CallingFromRootSystem();

  function adminAddToInventory(
    AdminSystemType self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToAdd
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).adminAddToInventory(owner, objectTypeId, numObjectsToAdd);
  }

  function adminAddToolToInventory(
    AdminSystemType self,
    EntityId owner,
    ObjectTypeId toolObjectTypeId
  ) internal returns (EntityId) {
    return CallWrapper(self.toResourceId(), address(0)).adminAddToolToInventory(owner, toolObjectTypeId);
  }

  function adminRemoveFromInventory(
    AdminSystemType self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToRemove
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).adminRemoveFromInventory(owner, objectTypeId, numObjectsToRemove);
  }

  function adminRemoveToolFromInventory(AdminSystemType self, EntityId owner, EntityId tool) internal {
    return CallWrapper(self.toResourceId(), address(0)).adminRemoveToolFromInventory(owner, tool);
  }

  function adminTeleportPlayer(AdminSystemType self, address playerAddress, Vec3 finalCoord) internal {
    return CallWrapper(self.toResourceId(), address(0)).adminTeleportPlayer(playerAddress, finalCoord);
  }

  function adminAddToInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToAdd
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminAddToInventory_EntityId_ObjectTypeId_uint16.adminAddToInventory,
      (owner, objectTypeId, numObjectsToAdd)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function adminAddToolToInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectTypeId toolObjectTypeId
  ) internal returns (EntityId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminAddToolToInventory_EntityId_ObjectTypeId.adminAddToolToInventory,
      (owner, toolObjectTypeId)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (EntityId));
  }

  function adminRemoveFromInventory(
    CallWrapper memory self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToRemove
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminRemoveFromInventory_EntityId_ObjectTypeId_uint16.adminRemoveFromInventory,
      (owner, objectTypeId, numObjectsToRemove)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function adminRemoveToolFromInventory(CallWrapper memory self, EntityId owner, EntityId tool) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminRemoveToolFromInventory_EntityId_EntityId.adminRemoveToolFromInventory,
      (owner, tool)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function adminTeleportPlayer(CallWrapper memory self, address playerAddress, Vec3 finalCoord) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminTeleportPlayer_address_Vec3.adminTeleportPlayer,
      (playerAddress, finalCoord)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function adminAddToInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToAdd
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _adminAddToInventory_EntityId_ObjectTypeId_uint16.adminAddToInventory,
      (owner, objectTypeId, numObjectsToAdd)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function adminAddToolToInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectTypeId toolObjectTypeId
  ) internal returns (EntityId) {
    bytes memory systemCall = abi.encodeCall(
      _adminAddToolToInventory_EntityId_ObjectTypeId.adminAddToolToInventory,
      (owner, toolObjectTypeId)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (EntityId));
  }

  function adminRemoveFromInventory(
    RootCallWrapper memory self,
    EntityId owner,
    ObjectTypeId objectTypeId,
    uint16 numObjectsToRemove
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _adminRemoveFromInventory_EntityId_ObjectTypeId_uint16.adminRemoveFromInventory,
      (owner, objectTypeId, numObjectsToRemove)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function adminRemoveToolFromInventory(RootCallWrapper memory self, EntityId owner, EntityId tool) internal {
    bytes memory systemCall = abi.encodeCall(
      _adminRemoveToolFromInventory_EntityId_EntityId.adminRemoveToolFromInventory,
      (owner, tool)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function adminTeleportPlayer(RootCallWrapper memory self, address playerAddress, Vec3 finalCoord) internal {
    bytes memory systemCall = abi.encodeCall(
      _adminTeleportPlayer_address_Vec3.adminTeleportPlayer,
      (playerAddress, finalCoord)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(AdminSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AdminSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(AdminSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AdminSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AdminSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AdminSystemType) {
    return AdminSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AdminSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _adminAddToInventory_EntityId_ObjectTypeId_uint16 {
  function adminAddToInventory(EntityId owner, ObjectTypeId objectTypeId, uint16 numObjectsToAdd) external;
}

interface _adminAddToolToInventory_EntityId_ObjectTypeId {
  function adminAddToolToInventory(EntityId owner, ObjectTypeId toolObjectTypeId) external;
}

interface _adminRemoveFromInventory_EntityId_ObjectTypeId_uint16 {
  function adminRemoveFromInventory(EntityId owner, ObjectTypeId objectTypeId, uint16 numObjectsToRemove) external;
}

interface _adminRemoveToolFromInventory_EntityId_EntityId {
  function adminRemoveToolFromInventory(EntityId owner, EntityId tool) external;
}

interface _adminTeleportPlayer_address_Vec3 {
  function adminTeleportPlayer(address playerAddress, Vec3 finalCoord) external;
}

using AdminSystemLib for AdminSystemType global;
using AdminSystemLib for CallWrapper global;
using AdminSystemLib for RootCallWrapper global;
