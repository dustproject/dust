// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { DrandEvmnetSystem } from "../../systems/DrandEvmnetSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type DrandEvmnetSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "DrandEvmnetSyste" }))
DrandEvmnetSystemType constant drandEvmnetSystem = DrandEvmnetSystemType.wrap(
  0x737900000000000000000000000000004472616e6445766d6e65745379737465
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title DrandEvmnetSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library DrandEvmnetSystemLib {
  error DrandEvmnetSystemLib_CallingFromRootSystem();
  error InvalidSignature(uint256[4] pubKey, uint256[2] message, uint256[2] signature);

  function publicKey(DrandEvmnetSystemType self) internal view returns (bytes memory __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).publicKey();
  }

  function publicKeyHash(DrandEvmnetSystemType self) internal view returns (bytes32 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).publicKeyHash();
  }

  function genesisTimestamp(DrandEvmnetSystemType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).genesisTimestamp();
  }

  function period(DrandEvmnetSystemType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).period();
  }

  function verifyBeaconRound(DrandEvmnetSystemType self, uint256 round, uint256[2] memory signature) internal view {
    return CallWrapper(self.toResourceId(), address(0)).verifyBeaconRound(round, signature);
  }

  function publicKey(CallWrapper memory self) internal view returns (bytes memory __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DrandEvmnetSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_publicKey.publicKey, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes));
    }
  }

  function publicKeyHash(CallWrapper memory self) internal view returns (bytes32 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DrandEvmnetSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_publicKeyHash.publicKeyHash, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (bytes32));
    }
  }

  function genesisTimestamp(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DrandEvmnetSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_genesisTimestamp.genesisTimestamp, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function period(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DrandEvmnetSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_period.period, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function verifyBeaconRound(CallWrapper memory self, uint256 round, uint256[2] memory signature) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DrandEvmnetSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _verifyBeaconRound_uint256_uint2560x5b325d.verifyBeaconRound,
      (round, signature)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function callFrom(DrandEvmnetSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(DrandEvmnetSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(DrandEvmnetSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(DrandEvmnetSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(DrandEvmnetSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (DrandEvmnetSystemType) {
    return DrandEvmnetSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(DrandEvmnetSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _publicKey {
  function publicKey() external;
}

interface _publicKeyHash {
  function publicKeyHash() external;
}

interface _genesisTimestamp {
  function genesisTimestamp() external;
}

interface _period {
  function period() external;
}

interface _verifyBeaconRound_uint256_uint2560x5b325d {
  function verifyBeaconRound(uint256 round, uint256[2] memory signature) external;
}

using DrandEvmnetSystemLib for DrandEvmnetSystemType global;
using DrandEvmnetSystemLib for CallWrapper global;
using DrandEvmnetSystemLib for RootCallWrapper global;
