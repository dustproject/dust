// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ReadSystem } from "../../systems/helper/ReadSystem.sol";
import { EntityId } from "../../EntityId.sol";
import { EntityData, PlayerEntityData } from "../../systems/helper/ReadUtils.sol";
import { Vec3 } from "../../Vec3.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ReadSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "ReadSystem" }))
ReadSystemType constant readSystem = ReadSystemType.wrap(
  0x737900000000000000000000000000005265616453797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ReadSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ReadSystemLib {
  error ReadSystemLib_CallingFromRootSystem();

  function getEntityData(ReadSystemType self, EntityId entityId) internal view returns (EntityData memory) {
    return CallWrapper(self.toResourceId(), address(0)).getEntityData(entityId);
  }

  function getEntityDataAtCoord(ReadSystemType self, Vec3 coord) internal view returns (EntityData memory) {
    return CallWrapper(self.toResourceId(), address(0)).getEntityDataAtCoord(coord);
  }

  function getMultipleEntityData(
    ReadSystemType self,
    EntityId[] memory entityIds
  ) internal view returns (EntityData[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getMultipleEntityData(entityIds);
  }

  function getMultipleEntityDataAtCoord(
    ReadSystemType self,
    Vec3[] memory coord
  ) internal view returns (EntityData[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getMultipleEntityDataAtCoord(coord);
  }

  function getPlayerEntityData(ReadSystemType self, address player) internal view returns (PlayerEntityData memory) {
    return CallWrapper(self.toResourceId(), address(0)).getPlayerEntityData(player);
  }

  function getPlayersEntityData(
    ReadSystemType self,
    address[] memory players
  ) internal view returns (PlayerEntityData[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).getPlayersEntityData(players);
  }

  function getEntityData(CallWrapper memory self, EntityId entityId) internal view returns (EntityData memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getEntityData_EntityId.getEntityData, (entityId));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (EntityData));
  }

  function getEntityDataAtCoord(CallWrapper memory self, Vec3 coord) internal view returns (EntityData memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getEntityDataAtCoord_Vec3.getEntityDataAtCoord, (coord));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (EntityData));
  }

  function getMultipleEntityData(
    CallWrapper memory self,
    EntityId[] memory entityIds
  ) internal view returns (EntityData[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getMultipleEntityData_EntityIdArray.getMultipleEntityData, (entityIds));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (EntityData[]));
  }

  function getMultipleEntityDataAtCoord(
    CallWrapper memory self,
    Vec3[] memory coord
  ) internal view returns (EntityData[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getMultipleEntityDataAtCoord_Vec3Array.getMultipleEntityDataAtCoord,
      (coord)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (EntityData[]));
  }

  function getPlayerEntityData(
    CallWrapper memory self,
    address player
  ) internal view returns (PlayerEntityData memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getPlayerEntityData_address.getPlayerEntityData, (player));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (PlayerEntityData));
  }

  function getPlayersEntityData(
    CallWrapper memory self,
    address[] memory players
  ) internal view returns (PlayerEntityData[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ReadSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getPlayersEntityData_addressArray.getPlayersEntityData, (players));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (PlayerEntityData[]));
  }

  function callFrom(ReadSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ReadSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ReadSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ReadSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ReadSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ReadSystemType) {
    return ReadSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(ReadSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _getEntityData_EntityId {
  function getEntityData(EntityId entityId) external;
}

interface _getEntityDataAtCoord_Vec3 {
  function getEntityDataAtCoord(Vec3 coord) external;
}

interface _getMultipleEntityData_EntityIdArray {
  function getMultipleEntityData(EntityId[] memory entityIds) external;
}

interface _getMultipleEntityDataAtCoord_Vec3Array {
  function getMultipleEntityDataAtCoord(Vec3[] memory coord) external;
}

interface _getPlayerEntityData_address {
  function getPlayerEntityData(address player) external;
}

interface _getPlayersEntityData_addressArray {
  function getPlayersEntityData(address[] memory players) external;
}

using ReadSystemLib for ReadSystemType global;
using ReadSystemLib for CallWrapper global;
using ReadSystemLib for RootCallWrapper global;
