// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EntityId } from "../../EntityId.sol";

struct ForceFieldShardData {
  uint128 lastAddedToForceField;
  EntityId entityId;
  EntityId forceFieldId;
}

library ForceFieldShard {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "ForceFieldShard", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000466f7263654669656c64536861726400);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0050030010202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (int32, int32, int32)
  Schema constant _keySchema = Schema.wrap(0x000c030023232300000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint128, bytes32, bytes32)
  Schema constant _valueSchema = Schema.wrap(0x005003000f5f5f00000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "x";
    keyNames[1] = "y";
    keyNames[2] = "z";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "lastAddedToForceField";
    fieldNames[1] = "entityId";
    fieldNames[2] = "forceFieldId";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get lastAddedToForceField.
   */
  function getLastAddedToForceField(int32 x, int32 y, int32 z) internal view returns (uint128 lastAddedToForceField) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get lastAddedToForceField.
   */
  function _getLastAddedToForceField(int32 x, int32 y, int32 z) internal view returns (uint128 lastAddedToForceField) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set lastAddedToForceField.
   */
  function setLastAddedToForceField(int32 x, int32 y, int32 z, uint128 lastAddedToForceField) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lastAddedToForceField)), _fieldLayout);
  }

  /**
   * @notice Set lastAddedToForceField.
   */
  function _setLastAddedToForceField(int32 x, int32 y, int32 z, uint128 lastAddedToForceField) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lastAddedToForceField)), _fieldLayout);
  }

  /**
   * @notice Get entityId.
   */
  function getEntityId(int32 x, int32 y, int32 z) internal view returns (EntityId entityId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Get entityId.
   */
  function _getEntityId(int32 x, int32 y, int32 z) internal view returns (EntityId entityId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Set entityId.
   */
  function setEntityId(int32 x, int32 y, int32 z, EntityId entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(EntityId.unwrap(entityId)), _fieldLayout);
  }

  /**
   * @notice Set entityId.
   */
  function _setEntityId(int32 x, int32 y, int32 z, EntityId entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(EntityId.unwrap(entityId)), _fieldLayout);
  }

  /**
   * @notice Get forceFieldId.
   */
  function getForceFieldId(int32 x, int32 y, int32 z) internal view returns (EntityId forceFieldId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Get forceFieldId.
   */
  function _getForceFieldId(int32 x, int32 y, int32 z) internal view returns (EntityId forceFieldId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Set forceFieldId.
   */
  function setForceFieldId(int32 x, int32 y, int32 z, EntityId forceFieldId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(EntityId.unwrap(forceFieldId)), _fieldLayout);
  }

  /**
   * @notice Set forceFieldId.
   */
  function _setForceFieldId(int32 x, int32 y, int32 z, EntityId forceFieldId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(EntityId.unwrap(forceFieldId)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(int32 x, int32 y, int32 z) internal view returns (ForceFieldShardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(int32 x, int32 y, int32 z) internal view returns (ForceFieldShardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    int32 x,
    int32 y,
    int32 z,
    uint128 lastAddedToForceField,
    EntityId entityId,
    EntityId forceFieldId
  ) internal {
    bytes memory _staticData = encodeStatic(lastAddedToForceField, entityId, forceFieldId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    int32 x,
    int32 y,
    int32 z,
    uint128 lastAddedToForceField,
    EntityId entityId,
    EntityId forceFieldId
  ) internal {
    bytes memory _staticData = encodeStatic(lastAddedToForceField, entityId, forceFieldId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(int32 x, int32 y, int32 z, ForceFieldShardData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.lastAddedToForceField, _table.entityId, _table.forceFieldId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(int32 x, int32 y, int32 z, ForceFieldShardData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.lastAddedToForceField, _table.entityId, _table.forceFieldId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint128 lastAddedToForceField, EntityId entityId, EntityId forceFieldId) {
    lastAddedToForceField = (uint128(Bytes.getBytes16(_blob, 0)));

    entityId = EntityId.wrap(Bytes.getBytes32(_blob, 16));

    forceFieldId = EntityId.wrap(Bytes.getBytes32(_blob, 48));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ForceFieldShardData memory _table) {
    (_table.lastAddedToForceField, _table.entityId, _table.forceFieldId) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(int32 x, int32 y, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(int32 x, int32 y, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint128 lastAddedToForceField,
    EntityId entityId,
    EntityId forceFieldId
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(lastAddedToForceField, entityId, forceFieldId);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint128 lastAddedToForceField,
    EntityId entityId,
    EntityId forceFieldId
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(lastAddedToForceField, entityId, forceFieldId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(int32 x, int32 y, int32 z) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    return _keyTuple;
  }
}
