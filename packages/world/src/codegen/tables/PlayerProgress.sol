// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EntityId } from "../../types/EntityId.sol";
import { ActivityType } from "../common.sol";

struct PlayerProgressData {
  uint256 accumulated;
  uint256 current;
  uint256 exponent;
  uint128 lastUpdatedAt;
}

library PlayerProgress {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PlayerProgress", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000506c6179657250726f67726573730000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0070040020202010000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint8)
  Schema constant _keySchema = Schema.wrap(0x002102005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint128)
  Schema constant _valueSchema = Schema.wrap(0x007004001f1f1f0f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "player";
    keyNames[1] = "activityType";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "accumulated";
    fieldNames[1] = "current";
    fieldNames[2] = "exponent";
    fieldNames[3] = "lastUpdatedAt";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get accumulated.
   */
  function getAccumulated(EntityId player, ActivityType activityType) internal view returns (uint256 accumulated) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get accumulated.
   */
  function _getAccumulated(EntityId player, ActivityType activityType) internal view returns (uint256 accumulated) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set accumulated.
   */
  function setAccumulated(EntityId player, ActivityType activityType, uint256 accumulated) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((accumulated)), _fieldLayout);
  }

  /**
   * @notice Set accumulated.
   */
  function _setAccumulated(EntityId player, ActivityType activityType, uint256 accumulated) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((accumulated)), _fieldLayout);
  }

  /**
   * @notice Get current.
   */
  function getCurrent(EntityId player, ActivityType activityType) internal view returns (uint256 current) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get current.
   */
  function _getCurrent(EntityId player, ActivityType activityType) internal view returns (uint256 current) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set current.
   */
  function setCurrent(EntityId player, ActivityType activityType, uint256 current) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((current)), _fieldLayout);
  }

  /**
   * @notice Set current.
   */
  function _setCurrent(EntityId player, ActivityType activityType, uint256 current) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((current)), _fieldLayout);
  }

  /**
   * @notice Get exponent.
   */
  function getExponent(EntityId player, ActivityType activityType) internal view returns (uint256 exponent) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get exponent.
   */
  function _getExponent(EntityId player, ActivityType activityType) internal view returns (uint256 exponent) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set exponent.
   */
  function setExponent(EntityId player, ActivityType activityType, uint256 exponent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((exponent)), _fieldLayout);
  }

  /**
   * @notice Set exponent.
   */
  function _setExponent(EntityId player, ActivityType activityType, uint256 exponent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((exponent)), _fieldLayout);
  }

  /**
   * @notice Get lastUpdatedAt.
   */
  function getLastUpdatedAt(EntityId player, ActivityType activityType) internal view returns (uint128 lastUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get lastUpdatedAt.
   */
  function _getLastUpdatedAt(EntityId player, ActivityType activityType) internal view returns (uint128 lastUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set lastUpdatedAt.
   */
  function setLastUpdatedAt(EntityId player, ActivityType activityType, uint128 lastUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lastUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Set lastUpdatedAt.
   */
  function _setLastUpdatedAt(EntityId player, ActivityType activityType, uint128 lastUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lastUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(EntityId player, ActivityType activityType) internal view returns (PlayerProgressData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(EntityId player, ActivityType activityType) internal view returns (PlayerProgressData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    EntityId player,
    ActivityType activityType,
    uint256 accumulated,
    uint256 current,
    uint256 exponent,
    uint128 lastUpdatedAt
  ) internal {
    bytes memory _staticData = encodeStatic(accumulated, current, exponent, lastUpdatedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    EntityId player,
    ActivityType activityType,
    uint256 accumulated,
    uint256 current,
    uint256 exponent,
    uint128 lastUpdatedAt
  ) internal {
    bytes memory _staticData = encodeStatic(accumulated, current, exponent, lastUpdatedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(EntityId player, ActivityType activityType, PlayerProgressData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.accumulated, _table.current, _table.exponent, _table.lastUpdatedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(EntityId player, ActivityType activityType, PlayerProgressData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.accumulated, _table.current, _table.exponent, _table.lastUpdatedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 accumulated, uint256 current, uint256 exponent, uint128 lastUpdatedAt) {
    accumulated = (uint256(Bytes.getBytes32(_blob, 0)));

    current = (uint256(Bytes.getBytes32(_blob, 32)));

    exponent = (uint256(Bytes.getBytes32(_blob, 64)));

    lastUpdatedAt = (uint128(Bytes.getBytes16(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PlayerProgressData memory _table) {
    (_table.accumulated, _table.current, _table.exponent, _table.lastUpdatedAt) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(EntityId player, ActivityType activityType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(EntityId player, ActivityType activityType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 accumulated,
    uint256 current,
    uint256 exponent,
    uint128 lastUpdatedAt
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(accumulated, current, exponent, lastUpdatedAt);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 accumulated,
    uint256 current,
    uint256 exponent,
    uint128 lastUpdatedAt
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(accumulated, current, exponent, lastUpdatedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(EntityId player, ActivityType activityType) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(player);
    _keyTuple[1] = bytes32(uint256(uint8(activityType)));

    return _keyTuple;
  }
}
