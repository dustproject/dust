// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct SpawnData {
  bool initialized;
  int32 spawnLowX;
  int32 spawnHighX;
  int32 spawnLowZ;
  int32 spawnHighZ;
}

library Spawn {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Spawn", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000537061776e0000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0011050001040404040000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (int32, int32)
  Schema constant _keySchema = Schema.wrap(0x0008020023230000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, int32, int32, int32, int32)
  Schema constant _valueSchema = Schema.wrap(0x0011050060232323230000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "x";
    keyNames[1] = "z";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "initialized";
    fieldNames[1] = "spawnLowX";
    fieldNames[2] = "spawnHighX";
    fieldNames[3] = "spawnLowZ";
    fieldNames[4] = "spawnHighZ";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get initialized.
   */
  function getInitialized(int32 x, int32 z) internal view returns (bool initialized) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get initialized.
   */
  function _getInitialized(int32 x, int32 z) internal view returns (bool initialized) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set initialized.
   */
  function setInitialized(int32 x, int32 z, bool initialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((initialized)), _fieldLayout);
  }

  /**
   * @notice Set initialized.
   */
  function _setInitialized(int32 x, int32 z, bool initialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((initialized)), _fieldLayout);
  }

  /**
   * @notice Get spawnLowX.
   */
  function getSpawnLowX(int32 x, int32 z) internal view returns (int32 spawnLowX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnLowX.
   */
  function _getSpawnLowX(int32 x, int32 z) internal view returns (int32 spawnLowX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnLowX.
   */
  function setSpawnLowX(int32 x, int32 z, int32 spawnLowX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((spawnLowX)), _fieldLayout);
  }

  /**
   * @notice Set spawnLowX.
   */
  function _setSpawnLowX(int32 x, int32 z, int32 spawnLowX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((spawnLowX)), _fieldLayout);
  }

  /**
   * @notice Get spawnHighX.
   */
  function getSpawnHighX(int32 x, int32 z) internal view returns (int32 spawnHighX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnHighX.
   */
  function _getSpawnHighX(int32 x, int32 z) internal view returns (int32 spawnHighX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnHighX.
   */
  function setSpawnHighX(int32 x, int32 z, int32 spawnHighX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((spawnHighX)), _fieldLayout);
  }

  /**
   * @notice Set spawnHighX.
   */
  function _setSpawnHighX(int32 x, int32 z, int32 spawnHighX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((spawnHighX)), _fieldLayout);
  }

  /**
   * @notice Get spawnLowZ.
   */
  function getSpawnLowZ(int32 x, int32 z) internal view returns (int32 spawnLowZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnLowZ.
   */
  function _getSpawnLowZ(int32 x, int32 z) internal view returns (int32 spawnLowZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnLowZ.
   */
  function setSpawnLowZ(int32 x, int32 z, int32 spawnLowZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((spawnLowZ)), _fieldLayout);
  }

  /**
   * @notice Set spawnLowZ.
   */
  function _setSpawnLowZ(int32 x, int32 z, int32 spawnLowZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((spawnLowZ)), _fieldLayout);
  }

  /**
   * @notice Get spawnHighZ.
   */
  function getSpawnHighZ(int32 x, int32 z) internal view returns (int32 spawnHighZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get spawnHighZ.
   */
  function _getSpawnHighZ(int32 x, int32 z) internal view returns (int32 spawnHighZ) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set spawnHighZ.
   */
  function setSpawnHighZ(int32 x, int32 z, int32 spawnHighZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((spawnHighZ)), _fieldLayout);
  }

  /**
   * @notice Set spawnHighZ.
   */
  function _setSpawnHighZ(int32 x, int32 z, int32 spawnHighZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((spawnHighZ)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(int32 x, int32 z) internal view returns (SpawnData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(int32 x, int32 z) internal view returns (SpawnData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    int32 x,
    int32 z,
    bool initialized,
    int32 spawnLowX,
    int32 spawnHighX,
    int32 spawnLowZ,
    int32 spawnHighZ
  ) internal {
    bytes memory _staticData = encodeStatic(initialized, spawnLowX, spawnHighX, spawnLowZ, spawnHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    int32 x,
    int32 z,
    bool initialized,
    int32 spawnLowX,
    int32 spawnHighX,
    int32 spawnLowZ,
    int32 spawnHighZ
  ) internal {
    bytes memory _staticData = encodeStatic(initialized, spawnLowX, spawnHighX, spawnLowZ, spawnHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(int32 x, int32 z, SpawnData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.initialized,
      _table.spawnLowX,
      _table.spawnHighX,
      _table.spawnLowZ,
      _table.spawnHighZ
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(int32 x, int32 z, SpawnData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.initialized,
      _table.spawnLowX,
      _table.spawnHighX,
      _table.spawnLowZ,
      _table.spawnHighZ
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (bool initialized, int32 spawnLowX, int32 spawnHighX, int32 spawnLowZ, int32 spawnHighZ) {
    initialized = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    spawnLowX = (int32(uint32(Bytes.getBytes4(_blob, 1))));

    spawnHighX = (int32(uint32(Bytes.getBytes4(_blob, 5))));

    spawnLowZ = (int32(uint32(Bytes.getBytes4(_blob, 9))));

    spawnHighZ = (int32(uint32(Bytes.getBytes4(_blob, 13))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (SpawnData memory _table) {
    (_table.initialized, _table.spawnLowX, _table.spawnHighX, _table.spawnLowZ, _table.spawnHighZ) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(int32 x, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(int32 x, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool initialized,
    int32 spawnLowX,
    int32 spawnHighX,
    int32 spawnLowZ,
    int32 spawnHighZ
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(initialized, spawnLowX, spawnHighX, spawnLowZ, spawnHighZ);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool initialized,
    int32 spawnLowX,
    int32 spawnHighX,
    int32 spawnLowZ,
    int32 spawnHighZ
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(initialized, spawnLowX, spawnHighX, spawnLowZ, spawnHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(int32 x, int32 z) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(z)));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
