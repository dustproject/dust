// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ForceFieldData {
  int16 fieldLowX;
  int16 fieldHighX;
  int16 fieldLowZ;
  int16 fieldHighZ;
}

library ForceField {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "ForceField", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000466f7263654669656c64000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0008040002020202000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int16, int16, int16, int16)
  Schema constant _valueSchema = Schema.wrap(0x0008040021212121000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "fieldLowX";
    fieldNames[1] = "fieldHighX";
    fieldNames[2] = "fieldLowZ";
    fieldNames[3] = "fieldHighZ";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get fieldLowX.
   */
  function getFieldLowX(bytes32 entityId) internal view returns (int16 fieldLowX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldLowX.
   */
  function _getFieldLowX(bytes32 entityId) internal view returns (int16 fieldLowX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldLowX (using the specified store).
   */
  function getFieldLowX(IStore _store, bytes32 entityId) internal view returns (int16 fieldLowX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set fieldLowX.
   */
  function setFieldLowX(bytes32 entityId, int16 fieldLowX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLowX)), _fieldLayout);
  }

  /**
   * @notice Set fieldLowX.
   */
  function _setFieldLowX(bytes32 entityId, int16 fieldLowX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLowX)), _fieldLayout);
  }

  /**
   * @notice Set fieldLowX (using the specified store).
   */
  function setFieldLowX(IStore _store, bytes32 entityId, int16 fieldLowX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fieldLowX)), _fieldLayout);
  }

  /**
   * @notice Get fieldHighX.
   */
  function getFieldHighX(bytes32 entityId) internal view returns (int16 fieldHighX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldHighX.
   */
  function _getFieldHighX(bytes32 entityId) internal view returns (int16 fieldHighX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldHighX (using the specified store).
   */
  function getFieldHighX(IStore _store, bytes32 entityId) internal view returns (int16 fieldHighX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set fieldHighX.
   */
  function setFieldHighX(bytes32 entityId, int16 fieldHighX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fieldHighX)), _fieldLayout);
  }

  /**
   * @notice Set fieldHighX.
   */
  function _setFieldHighX(bytes32 entityId, int16 fieldHighX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fieldHighX)), _fieldLayout);
  }

  /**
   * @notice Set fieldHighX (using the specified store).
   */
  function setFieldHighX(IStore _store, bytes32 entityId, int16 fieldHighX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fieldHighX)), _fieldLayout);
  }

  /**
   * @notice Get fieldLowZ.
   */
  function getFieldLowZ(bytes32 entityId) internal view returns (int16 fieldLowZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldLowZ.
   */
  function _getFieldLowZ(bytes32 entityId) internal view returns (int16 fieldLowZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldLowZ (using the specified store).
   */
  function getFieldLowZ(IStore _store, bytes32 entityId) internal view returns (int16 fieldLowZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set fieldLowZ.
   */
  function setFieldLowZ(bytes32 entityId, int16 fieldLowZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((fieldLowZ)), _fieldLayout);
  }

  /**
   * @notice Set fieldLowZ.
   */
  function _setFieldLowZ(bytes32 entityId, int16 fieldLowZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((fieldLowZ)), _fieldLayout);
  }

  /**
   * @notice Set fieldLowZ (using the specified store).
   */
  function setFieldLowZ(IStore _store, bytes32 entityId, int16 fieldLowZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((fieldLowZ)), _fieldLayout);
  }

  /**
   * @notice Get fieldHighZ.
   */
  function getFieldHighZ(bytes32 entityId) internal view returns (int16 fieldHighZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldHighZ.
   */
  function _getFieldHighZ(bytes32 entityId) internal view returns (int16 fieldHighZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get fieldHighZ (using the specified store).
   */
  function getFieldHighZ(IStore _store, bytes32 entityId) internal view returns (int16 fieldHighZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set fieldHighZ.
   */
  function setFieldHighZ(bytes32 entityId, int16 fieldHighZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((fieldHighZ)), _fieldLayout);
  }

  /**
   * @notice Set fieldHighZ.
   */
  function _setFieldHighZ(bytes32 entityId, int16 fieldHighZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((fieldHighZ)), _fieldLayout);
  }

  /**
   * @notice Set fieldHighZ (using the specified store).
   */
  function setFieldHighZ(IStore _store, bytes32 entityId, int16 fieldHighZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((fieldHighZ)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entityId) internal view returns (ForceFieldData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entityId) internal view returns (ForceFieldData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, bytes32 entityId) internal view returns (ForceFieldData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 entityId, int16 fieldLowX, int16 fieldHighX, int16 fieldLowZ, int16 fieldHighZ) internal {
    bytes memory _staticData = encodeStatic(fieldLowX, fieldHighX, fieldLowZ, fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 entityId, int16 fieldLowX, int16 fieldHighX, int16 fieldLowZ, int16 fieldHighZ) internal {
    bytes memory _staticData = encodeStatic(fieldLowX, fieldHighX, fieldLowZ, fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 entityId,
    int16 fieldLowX,
    int16 fieldHighX,
    int16 fieldLowZ,
    int16 fieldHighZ
  ) internal {
    bytes memory _staticData = encodeStatic(fieldLowX, fieldHighX, fieldLowZ, fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entityId, ForceFieldData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.fieldLowX, _table.fieldHighX, _table.fieldLowZ, _table.fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entityId, ForceFieldData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.fieldLowX, _table.fieldHighX, _table.fieldLowZ, _table.fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 entityId, ForceFieldData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.fieldLowX, _table.fieldHighX, _table.fieldLowZ, _table.fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (int16 fieldLowX, int16 fieldHighX, int16 fieldLowZ, int16 fieldHighZ) {
    fieldLowX = (int16(uint16(Bytes.getBytes2(_blob, 0))));

    fieldHighX = (int16(uint16(Bytes.getBytes2(_blob, 2))));

    fieldLowZ = (int16(uint16(Bytes.getBytes2(_blob, 4))));

    fieldHighZ = (int16(uint16(Bytes.getBytes2(_blob, 6))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ForceFieldData memory _table) {
    (_table.fieldLowX, _table.fieldHighX, _table.fieldLowZ, _table.fieldHighZ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    int16 fieldLowX,
    int16 fieldHighX,
    int16 fieldLowZ,
    int16 fieldHighZ
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(fieldLowX, fieldHighX, fieldLowZ, fieldHighZ);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int16 fieldLowX,
    int16 fieldHighX,
    int16 fieldLowZ,
    int16 fieldHighZ
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(fieldLowX, fieldHighX, fieldLowZ, fieldHighZ);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    return _keyTuple;
  }
}
