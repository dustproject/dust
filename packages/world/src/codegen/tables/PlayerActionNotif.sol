// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ActionType } from "../common.sol";

struct PlayerActionNotifData {
  ActionType actionType;
  bytes32 entityId;
  uint8 objectTypeId;
  int16 coordX;
  int16 coordY;
  int16 coordZ;
  uint256 amount;
}

library PlayerActionNotif {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PlayerActionNoti", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f740000000000000000000000000000506c61796572416374696f6e4e6f7469);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0048070001200102020220000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bytes32, uint8, int16, int16, int16, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00480700005f002121211f000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "playerEntityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "actionType";
    fieldNames[1] = "entityId";
    fieldNames[2] = "objectTypeId";
    fieldNames[3] = "coordX";
    fieldNames[4] = "coordY";
    fieldNames[5] = "coordZ";
    fieldNames[6] = "amount";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set actionType.
   */
  function setActionType(bytes32 playerEntityId, ActionType actionType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(actionType)), _fieldLayout);
  }

  /**
   * @notice Set actionType.
   */
  function _setActionType(bytes32 playerEntityId, ActionType actionType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(actionType)), _fieldLayout);
  }

  /**
   * @notice Set actionType (using the specified store).
   */
  function setActionType(IStore _store, bytes32 playerEntityId, ActionType actionType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(actionType)), _fieldLayout);
  }

  /**
   * @notice Set entityId.
   */
  function setEntityId(bytes32 playerEntityId, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((entityId)), _fieldLayout);
  }

  /**
   * @notice Set entityId.
   */
  function _setEntityId(bytes32 playerEntityId, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((entityId)), _fieldLayout);
  }

  /**
   * @notice Set entityId (using the specified store).
   */
  function setEntityId(IStore _store, bytes32 playerEntityId, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((entityId)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId.
   */
  function setObjectTypeId(bytes32 playerEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId.
   */
  function _setObjectTypeId(bytes32 playerEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId (using the specified store).
   */
  function setObjectTypeId(IStore _store, bytes32 playerEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set coordX.
   */
  function setCoordX(bytes32 playerEntityId, int16 coordX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((coordX)), _fieldLayout);
  }

  /**
   * @notice Set coordX.
   */
  function _setCoordX(bytes32 playerEntityId, int16 coordX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((coordX)), _fieldLayout);
  }

  /**
   * @notice Set coordX (using the specified store).
   */
  function setCoordX(IStore _store, bytes32 playerEntityId, int16 coordX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((coordX)), _fieldLayout);
  }

  /**
   * @notice Set coordY.
   */
  function setCoordY(bytes32 playerEntityId, int16 coordY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((coordY)), _fieldLayout);
  }

  /**
   * @notice Set coordY.
   */
  function _setCoordY(bytes32 playerEntityId, int16 coordY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((coordY)), _fieldLayout);
  }

  /**
   * @notice Set coordY (using the specified store).
   */
  function setCoordY(IStore _store, bytes32 playerEntityId, int16 coordY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((coordY)), _fieldLayout);
  }

  /**
   * @notice Set coordZ.
   */
  function setCoordZ(bytes32 playerEntityId, int16 coordZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((coordZ)), _fieldLayout);
  }

  /**
   * @notice Set coordZ.
   */
  function _setCoordZ(bytes32 playerEntityId, int16 coordZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((coordZ)), _fieldLayout);
  }

  /**
   * @notice Set coordZ (using the specified store).
   */
  function setCoordZ(IStore _store, bytes32 playerEntityId, int16 coordZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((coordZ)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 playerEntityId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 playerEntityId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount (using the specified store).
   */
  function setAmount(IStore _store, bytes32 playerEntityId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 playerEntityId,
    ActionType actionType,
    bytes32 entityId,
    uint8 objectTypeId,
    int16 coordX,
    int16 coordY,
    int16 coordZ,
    uint256 amount
  ) internal {
    bytes memory _staticData = encodeStatic(actionType, entityId, objectTypeId, coordX, coordY, coordZ, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 playerEntityId,
    ActionType actionType,
    bytes32 entityId,
    uint8 objectTypeId,
    int16 coordX,
    int16 coordY,
    int16 coordZ,
    uint256 amount
  ) internal {
    bytes memory _staticData = encodeStatic(actionType, entityId, objectTypeId, coordX, coordY, coordZ, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 playerEntityId,
    ActionType actionType,
    bytes32 entityId,
    uint8 objectTypeId,
    int16 coordX,
    int16 coordY,
    int16 coordZ,
    uint256 amount
  ) internal {
    bytes memory _staticData = encodeStatic(actionType, entityId, objectTypeId, coordX, coordY, coordZ, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 playerEntityId, PlayerActionNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionType,
      _table.entityId,
      _table.objectTypeId,
      _table.coordX,
      _table.coordY,
      _table.coordZ,
      _table.amount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 playerEntityId, PlayerActionNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionType,
      _table.entityId,
      _table.objectTypeId,
      _table.coordX,
      _table.coordY,
      _table.coordZ,
      _table.amount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 playerEntityId, PlayerActionNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionType,
      _table.entityId,
      _table.objectTypeId,
      _table.coordX,
      _table.coordY,
      _table.coordZ,
      _table.amount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ActionType actionType,
      bytes32 entityId,
      uint8 objectTypeId,
      int16 coordX,
      int16 coordY,
      int16 coordZ,
      uint256 amount
    )
  {
    actionType = ActionType(uint8(Bytes.getBytes1(_blob, 0)));

    entityId = (Bytes.getBytes32(_blob, 1));

    objectTypeId = (uint8(Bytes.getBytes1(_blob, 33)));

    coordX = (int16(uint16(Bytes.getBytes2(_blob, 34))));

    coordY = (int16(uint16(Bytes.getBytes2(_blob, 36))));

    coordZ = (int16(uint16(Bytes.getBytes2(_blob, 38))));

    amount = (uint256(Bytes.getBytes32(_blob, 40)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PlayerActionNotifData memory _table) {
    (
      _table.actionType,
      _table.entityId,
      _table.objectTypeId,
      _table.coordX,
      _table.coordY,
      _table.coordZ,
      _table.amount
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 playerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 playerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 playerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ActionType actionType,
    bytes32 entityId,
    uint8 objectTypeId,
    int16 coordX,
    int16 coordY,
    int16 coordZ,
    uint256 amount
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(actionType, entityId, objectTypeId, coordX, coordY, coordZ, amount);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ActionType actionType,
    bytes32 entityId,
    uint8 objectTypeId,
    int16 coordX,
    int16 coordY,
    int16 coordZ,
    uint256 amount
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(actionType, entityId, objectTypeId, coordX, coordY, coordZ, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 playerEntityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerEntityId;

    return _keyTuple;
  }
}
