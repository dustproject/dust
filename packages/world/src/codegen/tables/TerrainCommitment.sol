// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TerrainCommitmentData {
  uint256 blockNumber;
  bytes32 committerEntityId;
}

library TerrainCommitment {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "TerrainCommitmen", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000005465727261696e436f6d6d69746d656e);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0040020020200000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (int16, int16, int16)
  Schema constant _keySchema = Schema.wrap(0x0006030021212100000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, bytes32)
  Schema constant _valueSchema = Schema.wrap(0x004002001f5f0000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "x";
    keyNames[1] = "y";
    keyNames[2] = "z";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "blockNumber";
    fieldNames[1] = "committerEntityId";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get blockNumber.
   */
  function getBlockNumber(int16 x, int16 y, int16 z) internal view returns (uint256 blockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get blockNumber.
   */
  function _getBlockNumber(int16 x, int16 y, int16 z) internal view returns (uint256 blockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get blockNumber (using the specified store).
   */
  function getBlockNumber(IStore _store, int16 x, int16 y, int16 z) internal view returns (uint256 blockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set blockNumber.
   */
  function setBlockNumber(int16 x, int16 y, int16 z, uint256 blockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((blockNumber)), _fieldLayout);
  }

  /**
   * @notice Set blockNumber.
   */
  function _setBlockNumber(int16 x, int16 y, int16 z, uint256 blockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((blockNumber)), _fieldLayout);
  }

  /**
   * @notice Set blockNumber (using the specified store).
   */
  function setBlockNumber(IStore _store, int16 x, int16 y, int16 z, uint256 blockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((blockNumber)), _fieldLayout);
  }

  /**
   * @notice Get committerEntityId.
   */
  function getCommitterEntityId(int16 x, int16 y, int16 z) internal view returns (bytes32 committerEntityId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get committerEntityId.
   */
  function _getCommitterEntityId(int16 x, int16 y, int16 z) internal view returns (bytes32 committerEntityId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get committerEntityId (using the specified store).
   */
  function getCommitterEntityId(
    IStore _store,
    int16 x,
    int16 y,
    int16 z
  ) internal view returns (bytes32 committerEntityId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set committerEntityId.
   */
  function setCommitterEntityId(int16 x, int16 y, int16 z, bytes32 committerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((committerEntityId)), _fieldLayout);
  }

  /**
   * @notice Set committerEntityId.
   */
  function _setCommitterEntityId(int16 x, int16 y, int16 z, bytes32 committerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((committerEntityId)), _fieldLayout);
  }

  /**
   * @notice Set committerEntityId (using the specified store).
   */
  function setCommitterEntityId(IStore _store, int16 x, int16 y, int16 z, bytes32 committerEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((committerEntityId)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(int16 x, int16 y, int16 z) internal view returns (TerrainCommitmentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(int16 x, int16 y, int16 z) internal view returns (TerrainCommitmentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, int16 x, int16 y, int16 z) internal view returns (TerrainCommitmentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(int16 x, int16 y, int16 z, uint256 blockNumber, bytes32 committerEntityId) internal {
    bytes memory _staticData = encodeStatic(blockNumber, committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(int16 x, int16 y, int16 z, uint256 blockNumber, bytes32 committerEntityId) internal {
    bytes memory _staticData = encodeStatic(blockNumber, committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(IStore _store, int16 x, int16 y, int16 z, uint256 blockNumber, bytes32 committerEntityId) internal {
    bytes memory _staticData = encodeStatic(blockNumber, committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(int16 x, int16 y, int16 z, TerrainCommitmentData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.blockNumber, _table.committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(int16 x, int16 y, int16 z, TerrainCommitmentData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.blockNumber, _table.committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, int16 x, int16 y, int16 z, TerrainCommitmentData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.blockNumber, _table.committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint256 blockNumber, bytes32 committerEntityId) {
    blockNumber = (uint256(Bytes.getBytes32(_blob, 0)));

    committerEntityId = (Bytes.getBytes32(_blob, 32));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TerrainCommitmentData memory _table) {
    (_table.blockNumber, _table.committerEntityId) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(int16 x, int16 y, int16 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(int16 x, int16 y, int16 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, int16 x, int16 y, int16 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint256 blockNumber, bytes32 committerEntityId) internal pure returns (bytes memory) {
    return abi.encodePacked(blockNumber, committerEntityId);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 blockNumber,
    bytes32 committerEntityId
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(blockNumber, committerEntityId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(int16 x, int16 y, int16 z) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(int256(x)));
    _keyTuple[1] = bytes32(uint256(int256(y)));
    _keyTuple[2] = bytes32(uint256(int256(z)));

    return _keyTuple;
  }
}
