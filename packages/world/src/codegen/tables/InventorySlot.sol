// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EntityId } from "../../EntityId.sol";
import { ObjectType } from "../../ObjectType.sol";

struct InventorySlotData {
  EntityId entityId;
  ObjectType objectType;
  uint16 amount;
}

library InventorySlot {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "InventorySlot", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000496e76656e746f7279536c6f74000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0024030020020200000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint16)
  Schema constant _keySchema = Schema.wrap(0x002202005f010000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bytes32, uint16, uint16)
  Schema constant _valueSchema = Schema.wrap(0x002403005f010100000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "owner";
    keyNames[1] = "slot";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "entityId";
    fieldNames[1] = "objectType";
    fieldNames[2] = "amount";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get entityId.
   */
  function getEntityId(EntityId owner, uint16 slot) internal view returns (EntityId entityId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Get entityId.
   */
  function _getEntityId(EntityId owner, uint16 slot) internal view returns (EntityId entityId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityId.wrap(bytes32(_blob));
  }

  /**
   * @notice Set entityId.
   */
  function setEntityId(EntityId owner, uint16 slot, EntityId entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(EntityId.unwrap(entityId)), _fieldLayout);
  }

  /**
   * @notice Set entityId.
   */
  function _setEntityId(EntityId owner, uint16 slot, EntityId entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(EntityId.unwrap(entityId)), _fieldLayout);
  }

  /**
   * @notice Get objectType.
   */
  function getObjectType(EntityId owner, uint16 slot) internal view returns (ObjectType objectType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return ObjectType.wrap(uint16(bytes2(_blob)));
  }

  /**
   * @notice Get objectType.
   */
  function _getObjectType(EntityId owner, uint16 slot) internal view returns (ObjectType objectType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return ObjectType.wrap(uint16(bytes2(_blob)));
  }

  /**
   * @notice Set objectType.
   */
  function setObjectType(EntityId owner, uint16 slot, ObjectType objectType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(ObjectType.unwrap(objectType)), _fieldLayout);
  }

  /**
   * @notice Set objectType.
   */
  function _setObjectType(EntityId owner, uint16 slot, ObjectType objectType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(ObjectType.unwrap(objectType)), _fieldLayout);
  }

  /**
   * @notice Get amount.
   */
  function getAmount(EntityId owner, uint16 slot) internal view returns (uint16 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(EntityId owner, uint16 slot) internal view returns (uint16 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(EntityId owner, uint16 slot, uint16 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(EntityId owner, uint16 slot, uint16 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(EntityId owner, uint16 slot) internal view returns (InventorySlotData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(EntityId owner, uint16 slot) internal view returns (InventorySlotData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(EntityId owner, uint16 slot, EntityId entityId, ObjectType objectType, uint16 amount) internal {
    bytes memory _staticData = encodeStatic(entityId, objectType, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(EntityId owner, uint16 slot, EntityId entityId, ObjectType objectType, uint16 amount) internal {
    bytes memory _staticData = encodeStatic(entityId, objectType, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(EntityId owner, uint16 slot, InventorySlotData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.entityId, _table.objectType, _table.amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(EntityId owner, uint16 slot, InventorySlotData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.entityId, _table.objectType, _table.amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (EntityId entityId, ObjectType objectType, uint16 amount) {
    entityId = EntityId.wrap(Bytes.getBytes32(_blob, 0));

    objectType = ObjectType.wrap(uint16(Bytes.getBytes2(_blob, 32)));

    amount = (uint16(Bytes.getBytes2(_blob, 34)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (InventorySlotData memory _table) {
    (_table.entityId, _table.objectType, _table.amount) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(EntityId owner, uint16 slot) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(EntityId owner, uint16 slot) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(EntityId entityId, ObjectType objectType, uint16 amount) internal pure returns (bytes memory) {
    return abi.encodePacked(entityId, objectType, amount);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    EntityId entityId,
    ObjectType objectType,
    uint16 amount
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(entityId, objectType, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(EntityId owner, uint16 slot) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = EntityId.unwrap(owner);
    _keyTuple[1] = bytes32(uint256(slot));

    return _keyTuple;
  }
}
