// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { Recipes, RecipesData } from "../src/codegen/tables/Recipes.sol";

import { ObjectTypeId } from "../src/ObjectTypeId.sol";
import { ObjectTypes } from "../src/ObjectTypes.sol";

function initRecipes() {
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.OakLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.OakPlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.BirchLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.BirchPlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.JungleLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.JunglePlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.SakuraLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.SakuraPlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AcaciaLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.AcaciaPlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.SpruceLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.SprucePlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.DarkOakLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.DarkOakPlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.MangroveLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.MangrovePlanks;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 4;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Powerstone;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyLog;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 5;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Fuel;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Powerstone;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyLeaf;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 90;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Fuel;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Furnace;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.IronOre;
    inputTypes[1] = ObjectTypes.CoalOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 1;
    inputAmounts[1] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronOre;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Furnace;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.GoldOre;
    inputTypes[1] = ObjectTypes.CoalOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 1;
    inputAmounts[1] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.GoldBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldOre;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Furnace;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.DiamondOre;
    inputTypes[1] = ObjectTypes.CoalOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 1;
    inputAmounts[1] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Diamond;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Diamond;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.DiamondOre;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Furnace;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.NeptuniumOre;
    inputTypes[1] = ObjectTypes.CoalOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 1;
    inputAmounts[1] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.NeptuniumBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumOre;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.CopperOre;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.CopperBlock;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.CopperBlock;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.CopperOre;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronBlock;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.IronBlock;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.GoldBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldBlock;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.GoldBlock;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Diamond;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.DiamondBlock;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.DiamondBlock;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Diamond;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.NeptuniumBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumBlock;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.NeptuniumBlock;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Stone;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 9;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Furnace;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Furnace;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Stone;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 9;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 4;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Workbench;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.Stone;
    inputTypes[1] = ObjectTypes.Sand;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 6;
    inputAmounts[1] = 2;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Powerstone;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Powerstone;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](2);
    outputTypes[0] = ObjectTypes.Stone;
    outputTypes[1] = ObjectTypes.Sand;
    uint16[] memory outputAmounts = new uint16[](2);
    outputAmounts[0] = 6;
    outputAmounts[1] = 2;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.Stone;
    inputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 30;
    inputAmounts[1] = 5;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.ForceField;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.ForceField;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](2);
    outputTypes[0] = ObjectTypes.Stone;
    outputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory outputAmounts = new uint16[](2);
    outputAmounts[0] = 30;
    outputAmounts[1] = 5;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 8;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Chest;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 4;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.TextSign;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.ForceField;
    inputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 1;
    inputAmounts[1] = 8;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.SpawnTile;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.SpawnTile;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](2);
    outputTypes[0] = ObjectTypes.ForceField;
    outputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory outputAmounts = new uint16[](2);
    outputAmounts[0] = 1;
    outputAmounts[1] = 8;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Bed;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 5;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.WoodenPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 5;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.WoodenAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 8;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.WoodenWhacker;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.AnyPlank;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 4;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.WoodenHoe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.CopperOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.CopperPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.CopperOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.CopperAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.CopperOre;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 6;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.CopperWhacker;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 6;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronWhacker;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.GoldBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.GoldBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.GoldAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.Diamond;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.DiamondPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.Diamond;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.DiamondAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.NeptuniumBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumPick;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Workbench;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](2);
    inputTypes[0] = ObjectTypes.AnyPlank;
    inputTypes[1] = ObjectTypes.NeptuniumBar;
    uint16[] memory inputAmounts = new uint16[](2);
    inputAmounts[0] = 2;
    inputAmounts[1] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.NeptuniumAxe;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 3;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.Bucket;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Bucket;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 1;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.IronBar;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 3;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
  {
    ObjectTypeId stationObjectTypeId = ObjectTypes.Null;
    ObjectTypeId[] memory inputTypes = new ObjectTypeId[](1);
    inputTypes[0] = ObjectTypes.Wheat;
    uint16[] memory inputAmounts = new uint16[](1);
    inputAmounts[0] = 16;
    ObjectTypeId[] memory outputTypes = new ObjectTypeId[](1);
    outputTypes[0] = ObjectTypes.WheatSlop;
    uint16[] memory outputAmounts = new uint16[](1);
    outputAmounts[0] = 1;

    uint16[] memory _inputTypes;
    assembly ("memory-safe") {
      _inputTypes := inputTypes
    }

    uint16[] memory _outputTypes;
    assembly ("memory-safe") {
      _outputTypes := outputTypes
    }

    Recipes.set(
      keccak256(abi.encode(stationObjectTypeId, inputTypes, inputAmounts, outputTypes, outputAmounts)),
      stationObjectTypeId,
      0,
      _inputTypes,
      inputAmounts,
      _outputTypes,
      outputAmounts
    );
  }
}
