// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { NavigationAidKind, LeafTriggerKind } from "./../common.sol";

struct LeafTriggerData {
  NavigationAidKind navigationAidKind;
  int16 navigationAidPosX;
  int16 navigationAidPosY;
  int16 navigationAidPosZ;
  bytes32 navigaitonAidEntity;
  LeafTriggerKind kind;
  string name;
}

library LeafTrigger {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "experience", name: "LeafTrigger", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657870657269656e6365000000004c656166547269676765720000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0028060101020202200100000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, int16, int16, int16, bytes32, uint8, string)
  Schema constant _valueSchema = Schema.wrap(0x00280601002121215f00c5000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "navigationAidKind";
    fieldNames[1] = "navigationAidPosX";
    fieldNames[2] = "navigationAidPosY";
    fieldNames[3] = "navigationAidPosZ";
    fieldNames[4] = "navigaitonAidEntity";
    fieldNames[5] = "kind";
    fieldNames[6] = "name";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get navigationAidKind.
   */
  function getNavigationAidKind(bytes32 id) internal view returns (NavigationAidKind navigationAidKind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return NavigationAidKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get navigationAidKind.
   */
  function _getNavigationAidKind(bytes32 id) internal view returns (NavigationAidKind navigationAidKind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return NavigationAidKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get navigationAidKind (using the specified store).
   */
  function getNavigationAidKind(IStore _store, bytes32 id) internal view returns (NavigationAidKind navigationAidKind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return NavigationAidKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set navigationAidKind.
   */
  function setNavigationAidKind(bytes32 id, NavigationAidKind navigationAidKind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(navigationAidKind)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidKind.
   */
  function _setNavigationAidKind(bytes32 id, NavigationAidKind navigationAidKind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(navigationAidKind)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidKind (using the specified store).
   */
  function setNavigationAidKind(IStore _store, bytes32 id, NavigationAidKind navigationAidKind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(navigationAidKind)), _fieldLayout);
  }

  /**
   * @notice Get navigationAidPosX.
   */
  function getNavigationAidPosX(bytes32 id) internal view returns (int16 navigationAidPosX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosX.
   */
  function _getNavigationAidPosX(bytes32 id) internal view returns (int16 navigationAidPosX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosX (using the specified store).
   */
  function getNavigationAidPosX(IStore _store, bytes32 id) internal view returns (int16 navigationAidPosX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set navigationAidPosX.
   */
  function setNavigationAidPosX(bytes32 id, int16 navigationAidPosX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((navigationAidPosX)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosX.
   */
  function _setNavigationAidPosX(bytes32 id, int16 navigationAidPosX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((navigationAidPosX)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosX (using the specified store).
   */
  function setNavigationAidPosX(IStore _store, bytes32 id, int16 navigationAidPosX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((navigationAidPosX)), _fieldLayout);
  }

  /**
   * @notice Get navigationAidPosY.
   */
  function getNavigationAidPosY(bytes32 id) internal view returns (int16 navigationAidPosY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosY.
   */
  function _getNavigationAidPosY(bytes32 id) internal view returns (int16 navigationAidPosY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosY (using the specified store).
   */
  function getNavigationAidPosY(IStore _store, bytes32 id) internal view returns (int16 navigationAidPosY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set navigationAidPosY.
   */
  function setNavigationAidPosY(bytes32 id, int16 navigationAidPosY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((navigationAidPosY)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosY.
   */
  function _setNavigationAidPosY(bytes32 id, int16 navigationAidPosY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((navigationAidPosY)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosY (using the specified store).
   */
  function setNavigationAidPosY(IStore _store, bytes32 id, int16 navigationAidPosY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((navigationAidPosY)), _fieldLayout);
  }

  /**
   * @notice Get navigationAidPosZ.
   */
  function getNavigationAidPosZ(bytes32 id) internal view returns (int16 navigationAidPosZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosZ.
   */
  function _getNavigationAidPosZ(bytes32 id) internal view returns (int16 navigationAidPosZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get navigationAidPosZ (using the specified store).
   */
  function getNavigationAidPosZ(IStore _store, bytes32 id) internal view returns (int16 navigationAidPosZ) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set navigationAidPosZ.
   */
  function setNavigationAidPosZ(bytes32 id, int16 navigationAidPosZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((navigationAidPosZ)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosZ.
   */
  function _setNavigationAidPosZ(bytes32 id, int16 navigationAidPosZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((navigationAidPosZ)), _fieldLayout);
  }

  /**
   * @notice Set navigationAidPosZ (using the specified store).
   */
  function setNavigationAidPosZ(IStore _store, bytes32 id, int16 navigationAidPosZ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((navigationAidPosZ)), _fieldLayout);
  }

  /**
   * @notice Get navigaitonAidEntity.
   */
  function getNavigaitonAidEntity(bytes32 id) internal view returns (bytes32 navigaitonAidEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get navigaitonAidEntity.
   */
  function _getNavigaitonAidEntity(bytes32 id) internal view returns (bytes32 navigaitonAidEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get navigaitonAidEntity (using the specified store).
   */
  function getNavigaitonAidEntity(IStore _store, bytes32 id) internal view returns (bytes32 navigaitonAidEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set navigaitonAidEntity.
   */
  function setNavigaitonAidEntity(bytes32 id, bytes32 navigaitonAidEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((navigaitonAidEntity)), _fieldLayout);
  }

  /**
   * @notice Set navigaitonAidEntity.
   */
  function _setNavigaitonAidEntity(bytes32 id, bytes32 navigaitonAidEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((navigaitonAidEntity)), _fieldLayout);
  }

  /**
   * @notice Set navigaitonAidEntity (using the specified store).
   */
  function setNavigaitonAidEntity(IStore _store, bytes32 id, bytes32 navigaitonAidEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((navigaitonAidEntity)), _fieldLayout);
  }

  /**
   * @notice Get kind.
   */
  function getKind(bytes32 id) internal view returns (LeafTriggerKind kind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return LeafTriggerKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get kind.
   */
  function _getKind(bytes32 id) internal view returns (LeafTriggerKind kind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return LeafTriggerKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get kind (using the specified store).
   */
  function getKind(IStore _store, bytes32 id) internal view returns (LeafTriggerKind kind) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return LeafTriggerKind(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set kind.
   */
  function setKind(bytes32 id, LeafTriggerKind kind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(kind)), _fieldLayout);
  }

  /**
   * @notice Set kind.
   */
  function _setKind(bytes32 id, LeafTriggerKind kind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(kind)), _fieldLayout);
  }

  /**
   * @notice Set kind (using the specified store).
   */
  function setKind(IStore _store, bytes32 id, LeafTriggerKind kind) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(kind)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(bytes32 id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(bytes32 id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name (using the specified store).
   */
  function getName(IStore _store, bytes32 id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(bytes32 id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(bytes32 id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name (using the specified store).
   */
  function setName(IStore _store, bytes32 id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(bytes32 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(bytes32 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name (using the specified store).
   */
  function lengthName(IStore _store, bytes32 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(bytes32 id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(bytes32 id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name (using the specified store).
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(IStore _store, bytes32 id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(bytes32 id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(bytes32 id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name (using the specified store).
   */
  function pushName(IStore _store, bytes32 id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name (using the specified store).
   */
  function popName(IStore _store, bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(bytes32 id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(bytes32 id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name (using the specified store) at `_index`.
   */
  function updateName(IStore _store, bytes32 id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      _store.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 id) internal view returns (LeafTriggerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 id) internal view returns (LeafTriggerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, bytes32 id) internal view returns (LeafTriggerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 id,
    NavigationAidKind navigationAidKind,
    int16 navigationAidPosX,
    int16 navigationAidPosY,
    int16 navigationAidPosZ,
    bytes32 navigaitonAidEntity,
    LeafTriggerKind kind,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      navigationAidKind,
      navigationAidPosX,
      navigationAidPosY,
      navigationAidPosZ,
      navigaitonAidEntity,
      kind
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 id,
    NavigationAidKind navigationAidKind,
    int16 navigationAidPosX,
    int16 navigationAidPosY,
    int16 navigationAidPosZ,
    bytes32 navigaitonAidEntity,
    LeafTriggerKind kind,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      navigationAidKind,
      navigationAidPosX,
      navigationAidPosY,
      navigationAidPosZ,
      navigaitonAidEntity,
      kind
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 id,
    NavigationAidKind navigationAidKind,
    int16 navigationAidPosX,
    int16 navigationAidPosY,
    int16 navigationAidPosZ,
    bytes32 navigaitonAidEntity,
    LeafTriggerKind kind,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      navigationAidKind,
      navigationAidPosX,
      navigationAidPosY,
      navigationAidPosZ,
      navigaitonAidEntity,
      kind
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 id, LeafTriggerData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.navigationAidKind,
      _table.navigationAidPosX,
      _table.navigationAidPosY,
      _table.navigationAidPosZ,
      _table.navigaitonAidEntity,
      _table.kind
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 id, LeafTriggerData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.navigationAidKind,
      _table.navigationAidPosX,
      _table.navigationAidPosY,
      _table.navigationAidPosZ,
      _table.navigaitonAidEntity,
      _table.kind
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 id, LeafTriggerData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.navigationAidKind,
      _table.navigationAidPosX,
      _table.navigationAidPosY,
      _table.navigationAidPosZ,
      _table.navigaitonAidEntity,
      _table.kind
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      NavigationAidKind navigationAidKind,
      int16 navigationAidPosX,
      int16 navigationAidPosY,
      int16 navigationAidPosZ,
      bytes32 navigaitonAidEntity,
      LeafTriggerKind kind
    )
  {
    navigationAidKind = NavigationAidKind(uint8(Bytes.getBytes1(_blob, 0)));

    navigationAidPosX = (int16(uint16(Bytes.getBytes2(_blob, 1))));

    navigationAidPosY = (int16(uint16(Bytes.getBytes2(_blob, 3))));

    navigationAidPosZ = (int16(uint16(Bytes.getBytes2(_blob, 5))));

    navigaitonAidEntity = (Bytes.getBytes32(_blob, 7));

    kind = LeafTriggerKind(uint8(Bytes.getBytes1(_blob, 39)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory name) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (LeafTriggerData memory _table) {
    (
      _table.navigationAidKind,
      _table.navigationAidPosX,
      _table.navigationAidPosY,
      _table.navigationAidPosZ,
      _table.navigaitonAidEntity,
      _table.kind
    ) = decodeStatic(_staticData);

    (_table.name) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    NavigationAidKind navigationAidKind,
    int16 navigationAidPosX,
    int16 navigationAidPosY,
    int16 navigationAidPosZ,
    bytes32 navigaitonAidEntity,
    LeafTriggerKind kind
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        navigationAidKind,
        navigationAidPosX,
        navigationAidPosY,
        navigationAidPosZ,
        navigaitonAidEntity,
        kind
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory name) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(name).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    NavigationAidKind navigationAidKind,
    int16 navigationAidPosX,
    int16 navigationAidPosY,
    int16 navigationAidPosZ,
    bytes32 navigaitonAidEntity,
    LeafTriggerKind kind,
    string memory name
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      navigationAidKind,
      navigationAidPosX,
      navigationAidPosY,
      navigationAidPosZ,
      navigaitonAidEntity,
      kind
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    return _keyTuple;
  }
}
