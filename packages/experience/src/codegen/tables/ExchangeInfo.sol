// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ResourceType } from "../common.sol";

struct ExchangeInfoData {
  ResourceType inResourceType;
  bytes32 inResourceId;
  uint256 inUnitAmount;
  uint256 inMaxAmount;
  ResourceType outResourceType;
  bytes32 outResourceId;
  uint256 outUnitAmount;
  uint256 outMaxAmount;
}

library ExchangeInfo {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "experience", name: "ExchangeInfo", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657870657269656e63650000000045786368616e6765496e666f00000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c2080001202020012020200000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bytes32, uint256, uint256, uint8, bytes32, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00c20800005f1f1f005f1f1f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "entityId";
    keyNames[1] = "exchangeId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "inResourceType";
    fieldNames[1] = "inResourceId";
    fieldNames[2] = "inUnitAmount";
    fieldNames[3] = "inMaxAmount";
    fieldNames[4] = "outResourceType";
    fieldNames[5] = "outResourceId";
    fieldNames[6] = "outUnitAmount";
    fieldNames[7] = "outMaxAmount";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get inResourceType.
   */
  function getInResourceType(bytes32 entityId, bytes32 exchangeId) internal view returns (ResourceType inResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get inResourceType.
   */
  function _getInResourceType(
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ResourceType inResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get inResourceType (using the specified store).
   */
  function getInResourceType(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ResourceType inResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set inResourceType.
   */
  function setInResourceType(bytes32 entityId, bytes32 exchangeId, ResourceType inResourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(inResourceType)), _fieldLayout);
  }

  /**
   * @notice Set inResourceType.
   */
  function _setInResourceType(bytes32 entityId, bytes32 exchangeId, ResourceType inResourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(inResourceType)), _fieldLayout);
  }

  /**
   * @notice Set inResourceType (using the specified store).
   */
  function setInResourceType(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId,
    ResourceType inResourceType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(inResourceType)), _fieldLayout);
  }

  /**
   * @notice Get inResourceId.
   */
  function getInResourceId(bytes32 entityId, bytes32 exchangeId) internal view returns (bytes32 inResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get inResourceId.
   */
  function _getInResourceId(bytes32 entityId, bytes32 exchangeId) internal view returns (bytes32 inResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get inResourceId (using the specified store).
   */
  function getInResourceId(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (bytes32 inResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set inResourceId.
   */
  function setInResourceId(bytes32 entityId, bytes32 exchangeId, bytes32 inResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inResourceId)), _fieldLayout);
  }

  /**
   * @notice Set inResourceId.
   */
  function _setInResourceId(bytes32 entityId, bytes32 exchangeId, bytes32 inResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inResourceId)), _fieldLayout);
  }

  /**
   * @notice Set inResourceId (using the specified store).
   */
  function setInResourceId(IStore _store, bytes32 entityId, bytes32 exchangeId, bytes32 inResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inResourceId)), _fieldLayout);
  }

  /**
   * @notice Get inUnitAmount.
   */
  function getInUnitAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 inUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inUnitAmount.
   */
  function _getInUnitAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 inUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inUnitAmount (using the specified store).
   */
  function getInUnitAmount(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (uint256 inUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set inUnitAmount.
   */
  function setInUnitAmount(bytes32 entityId, bytes32 exchangeId, uint256 inUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Set inUnitAmount.
   */
  function _setInUnitAmount(bytes32 entityId, bytes32 exchangeId, uint256 inUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Set inUnitAmount (using the specified store).
   */
  function setInUnitAmount(IStore _store, bytes32 entityId, bytes32 exchangeId, uint256 inUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Get inMaxAmount.
   */
  function getInMaxAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 inMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inMaxAmount.
   */
  function _getInMaxAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 inMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inMaxAmount (using the specified store).
   */
  function getInMaxAmount(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (uint256 inMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set inMaxAmount.
   */
  function setInMaxAmount(bytes32 entityId, bytes32 exchangeId, uint256 inMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Set inMaxAmount.
   */
  function _setInMaxAmount(bytes32 entityId, bytes32 exchangeId, uint256 inMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Set inMaxAmount (using the specified store).
   */
  function setInMaxAmount(IStore _store, bytes32 entityId, bytes32 exchangeId, uint256 inMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Get outResourceType.
   */
  function getOutResourceType(
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ResourceType outResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get outResourceType.
   */
  function _getOutResourceType(
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ResourceType outResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get outResourceType (using the specified store).
   */
  function getOutResourceType(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ResourceType outResourceType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set outResourceType.
   */
  function setOutResourceType(bytes32 entityId, bytes32 exchangeId, ResourceType outResourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(uint8(outResourceType)), _fieldLayout);
  }

  /**
   * @notice Set outResourceType.
   */
  function _setOutResourceType(bytes32 entityId, bytes32 exchangeId, ResourceType outResourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(uint8(outResourceType)), _fieldLayout);
  }

  /**
   * @notice Set outResourceType (using the specified store).
   */
  function setOutResourceType(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId,
    ResourceType outResourceType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(uint8(outResourceType)), _fieldLayout);
  }

  /**
   * @notice Get outResourceId.
   */
  function getOutResourceId(bytes32 entityId, bytes32 exchangeId) internal view returns (bytes32 outResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get outResourceId.
   */
  function _getOutResourceId(bytes32 entityId, bytes32 exchangeId) internal view returns (bytes32 outResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get outResourceId (using the specified store).
   */
  function getOutResourceId(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (bytes32 outResourceId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set outResourceId.
   */
  function setOutResourceId(bytes32 entityId, bytes32 exchangeId, bytes32 outResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outResourceId)), _fieldLayout);
  }

  /**
   * @notice Set outResourceId.
   */
  function _setOutResourceId(bytes32 entityId, bytes32 exchangeId, bytes32 outResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outResourceId)), _fieldLayout);
  }

  /**
   * @notice Set outResourceId (using the specified store).
   */
  function setOutResourceId(IStore _store, bytes32 entityId, bytes32 exchangeId, bytes32 outResourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outResourceId)), _fieldLayout);
  }

  /**
   * @notice Get outUnitAmount.
   */
  function getOutUnitAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 outUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outUnitAmount.
   */
  function _getOutUnitAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 outUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outUnitAmount (using the specified store).
   */
  function getOutUnitAmount(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (uint256 outUnitAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set outUnitAmount.
   */
  function setOutUnitAmount(bytes32 entityId, bytes32 exchangeId, uint256 outUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Set outUnitAmount.
   */
  function _setOutUnitAmount(bytes32 entityId, bytes32 exchangeId, uint256 outUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Set outUnitAmount (using the specified store).
   */
  function setOutUnitAmount(IStore _store, bytes32 entityId, bytes32 exchangeId, uint256 outUnitAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outUnitAmount)), _fieldLayout);
  }

  /**
   * @notice Get outMaxAmount.
   */
  function getOutMaxAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 outMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outMaxAmount.
   */
  function _getOutMaxAmount(bytes32 entityId, bytes32 exchangeId) internal view returns (uint256 outMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outMaxAmount (using the specified store).
   */
  function getOutMaxAmount(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (uint256 outMaxAmount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set outMaxAmount.
   */
  function setOutMaxAmount(bytes32 entityId, bytes32 exchangeId, uint256 outMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Set outMaxAmount.
   */
  function _setOutMaxAmount(bytes32 entityId, bytes32 exchangeId, uint256 outMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Set outMaxAmount (using the specified store).
   */
  function setOutMaxAmount(IStore _store, bytes32 entityId, bytes32 exchangeId, uint256 outMaxAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outMaxAmount)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entityId, bytes32 exchangeId) internal view returns (ExchangeInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entityId, bytes32 exchangeId) internal view returns (ExchangeInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId
  ) internal view returns (ExchangeInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entityId,
    bytes32 exchangeId,
    ResourceType inResourceType,
    bytes32 inResourceId,
    uint256 inUnitAmount,
    uint256 inMaxAmount,
    ResourceType outResourceType,
    bytes32 outResourceId,
    uint256 outUnitAmount,
    uint256 outMaxAmount
  ) internal {
    bytes memory _staticData = encodeStatic(
      inResourceType,
      inResourceId,
      inUnitAmount,
      inMaxAmount,
      outResourceType,
      outResourceId,
      outUnitAmount,
      outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entityId,
    bytes32 exchangeId,
    ResourceType inResourceType,
    bytes32 inResourceId,
    uint256 inUnitAmount,
    uint256 inMaxAmount,
    ResourceType outResourceType,
    bytes32 outResourceId,
    uint256 outUnitAmount,
    uint256 outMaxAmount
  ) internal {
    bytes memory _staticData = encodeStatic(
      inResourceType,
      inResourceId,
      inUnitAmount,
      inMaxAmount,
      outResourceType,
      outResourceId,
      outUnitAmount,
      outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 entityId,
    bytes32 exchangeId,
    ResourceType inResourceType,
    bytes32 inResourceId,
    uint256 inUnitAmount,
    uint256 inMaxAmount,
    ResourceType outResourceType,
    bytes32 outResourceId,
    uint256 outUnitAmount,
    uint256 outMaxAmount
  ) internal {
    bytes memory _staticData = encodeStatic(
      inResourceType,
      inResourceId,
      inUnitAmount,
      inMaxAmount,
      outResourceType,
      outResourceId,
      outUnitAmount,
      outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entityId, bytes32 exchangeId, ExchangeInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.inResourceType,
      _table.inResourceId,
      _table.inUnitAmount,
      _table.inMaxAmount,
      _table.outResourceType,
      _table.outResourceId,
      _table.outUnitAmount,
      _table.outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entityId, bytes32 exchangeId, ExchangeInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.inResourceType,
      _table.inResourceId,
      _table.inUnitAmount,
      _table.inMaxAmount,
      _table.outResourceType,
      _table.outResourceId,
      _table.outUnitAmount,
      _table.outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 entityId, bytes32 exchangeId, ExchangeInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.inResourceType,
      _table.inResourceId,
      _table.inUnitAmount,
      _table.inMaxAmount,
      _table.outResourceType,
      _table.outResourceId,
      _table.outUnitAmount,
      _table.outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ResourceType inResourceType,
      bytes32 inResourceId,
      uint256 inUnitAmount,
      uint256 inMaxAmount,
      ResourceType outResourceType,
      bytes32 outResourceId,
      uint256 outUnitAmount,
      uint256 outMaxAmount
    )
  {
    inResourceType = ResourceType(uint8(Bytes.getBytes1(_blob, 0)));

    inResourceId = (Bytes.getBytes32(_blob, 1));

    inUnitAmount = (uint256(Bytes.getBytes32(_blob, 33)));

    inMaxAmount = (uint256(Bytes.getBytes32(_blob, 65)));

    outResourceType = ResourceType(uint8(Bytes.getBytes1(_blob, 97)));

    outResourceId = (Bytes.getBytes32(_blob, 98));

    outUnitAmount = (uint256(Bytes.getBytes32(_blob, 130)));

    outMaxAmount = (uint256(Bytes.getBytes32(_blob, 162)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ExchangeInfoData memory _table) {
    (
      _table.inResourceType,
      _table.inResourceId,
      _table.inUnitAmount,
      _table.inMaxAmount,
      _table.outResourceType,
      _table.outResourceId,
      _table.outUnitAmount,
      _table.outMaxAmount
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entityId, bytes32 exchangeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entityId, bytes32 exchangeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 entityId, bytes32 exchangeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ResourceType inResourceType,
    bytes32 inResourceId,
    uint256 inUnitAmount,
    uint256 inMaxAmount,
    ResourceType outResourceType,
    bytes32 outResourceId,
    uint256 outUnitAmount,
    uint256 outMaxAmount
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        inResourceType,
        inResourceId,
        inUnitAmount,
        inMaxAmount,
        outResourceType,
        outResourceId,
        outUnitAmount,
        outMaxAmount
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ResourceType inResourceType,
    bytes32 inResourceId,
    uint256 inUnitAmount,
    uint256 inMaxAmount,
    ResourceType outResourceType,
    bytes32 outResourceId,
    uint256 outUnitAmount,
    uint256 outMaxAmount
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      inResourceType,
      inResourceId,
      inUnitAmount,
      inMaxAmount,
      outResourceType,
      outResourceId,
      outUnitAmount,
      outMaxAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entityId, bytes32 exchangeId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entityId;
    _keyTuple[1] = exchangeId;

    return _keyTuple;
  }
}
