// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ShopTxType } from "../common.sol";

struct ItemShopNotifData {
  address player;
  ShopTxType shopTxType;
  uint8 objectTypeId;
  uint16 amount;
  uint256 price;
  address paymentToken;
}

library ItemShopNotif {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "experience", name: "ItemShopNotif", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f74657870657269656e6365000000004974656d53686f704e6f746966000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x004c060014010102201400000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, uint8, uint8, uint16, uint256, address)
  Schema constant _valueSchema = Schema.wrap(0x004c0600610000011f6100000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "chestEntityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "player";
    fieldNames[1] = "shopTxType";
    fieldNames[2] = "objectTypeId";
    fieldNames[3] = "amount";
    fieldNames[4] = "price";
    fieldNames[5] = "paymentToken";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set player.
   */
  function setPlayer(bytes32 chestEntityId, address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player)), _fieldLayout);
  }

  /**
   * @notice Set player.
   */
  function _setPlayer(bytes32 chestEntityId, address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player)), _fieldLayout);
  }

  /**
   * @notice Set player (using the specified store).
   */
  function setPlayer(IStore _store, bytes32 chestEntityId, address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player)), _fieldLayout);
  }

  /**
   * @notice Set shopTxType.
   */
  function setShopTxType(bytes32 chestEntityId, ShopTxType shopTxType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(shopTxType)), _fieldLayout);
  }

  /**
   * @notice Set shopTxType.
   */
  function _setShopTxType(bytes32 chestEntityId, ShopTxType shopTxType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(shopTxType)), _fieldLayout);
  }

  /**
   * @notice Set shopTxType (using the specified store).
   */
  function setShopTxType(IStore _store, bytes32 chestEntityId, ShopTxType shopTxType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(shopTxType)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId.
   */
  function setObjectTypeId(bytes32 chestEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId.
   */
  function _setObjectTypeId(bytes32 chestEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set objectTypeId (using the specified store).
   */
  function setObjectTypeId(IStore _store, bytes32 chestEntityId, uint8 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((objectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 chestEntityId, uint16 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 chestEntityId, uint16 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount (using the specified store).
   */
  function setAmount(IStore _store, bytes32 chestEntityId, uint16 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set price.
   */
  function setPrice(bytes32 chestEntityId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Set price.
   */
  function _setPrice(bytes32 chestEntityId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Set price (using the specified store).
   */
  function setPrice(IStore _store, bytes32 chestEntityId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Set paymentToken.
   */
  function setPaymentToken(bytes32 chestEntityId, address paymentToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((paymentToken)), _fieldLayout);
  }

  /**
   * @notice Set paymentToken.
   */
  function _setPaymentToken(bytes32 chestEntityId, address paymentToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((paymentToken)), _fieldLayout);
  }

  /**
   * @notice Set paymentToken (using the specified store).
   */
  function setPaymentToken(IStore _store, bytes32 chestEntityId, address paymentToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((paymentToken)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 chestEntityId,
    address player,
    ShopTxType shopTxType,
    uint8 objectTypeId,
    uint16 amount,
    uint256 price,
    address paymentToken
  ) internal {
    bytes memory _staticData = encodeStatic(player, shopTxType, objectTypeId, amount, price, paymentToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 chestEntityId,
    address player,
    ShopTxType shopTxType,
    uint8 objectTypeId,
    uint16 amount,
    uint256 price,
    address paymentToken
  ) internal {
    bytes memory _staticData = encodeStatic(player, shopTxType, objectTypeId, amount, price, paymentToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 chestEntityId,
    address player,
    ShopTxType shopTxType,
    uint8 objectTypeId,
    uint16 amount,
    uint256 price,
    address paymentToken
  ) internal {
    bytes memory _staticData = encodeStatic(player, shopTxType, objectTypeId, amount, price, paymentToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 chestEntityId, ItemShopNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.player,
      _table.shopTxType,
      _table.objectTypeId,
      _table.amount,
      _table.price,
      _table.paymentToken
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 chestEntityId, ItemShopNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.player,
      _table.shopTxType,
      _table.objectTypeId,
      _table.amount,
      _table.price,
      _table.paymentToken
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 chestEntityId, ItemShopNotifData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.player,
      _table.shopTxType,
      _table.objectTypeId,
      _table.amount,
      _table.price,
      _table.paymentToken
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address player,
      ShopTxType shopTxType,
      uint8 objectTypeId,
      uint16 amount,
      uint256 price,
      address paymentToken
    )
  {
    player = (address(Bytes.getBytes20(_blob, 0)));

    shopTxType = ShopTxType(uint8(Bytes.getBytes1(_blob, 20)));

    objectTypeId = (uint8(Bytes.getBytes1(_blob, 21)));

    amount = (uint16(Bytes.getBytes2(_blob, 22)));

    price = (uint256(Bytes.getBytes32(_blob, 24)));

    paymentToken = (address(Bytes.getBytes20(_blob, 56)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ItemShopNotifData memory _table) {
    (
      _table.player,
      _table.shopTxType,
      _table.objectTypeId,
      _table.amount,
      _table.price,
      _table.paymentToken
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 chestEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 chestEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 chestEntityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address player,
    ShopTxType shopTxType,
    uint8 objectTypeId,
    uint16 amount,
    uint256 price,
    address paymentToken
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(player, shopTxType, objectTypeId, amount, price, paymentToken);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address player,
    ShopTxType shopTxType,
    uint8 objectTypeId,
    uint16 amount,
    uint256 price,
    address paymentToken
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(player, shopTxType, objectTypeId, amount, price, paymentToken);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 chestEntityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = chestEntityId;

    return _keyTuple;
  }
}
