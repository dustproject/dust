// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ExchangeType } from "./../common.sol";

struct ExchangeChestData {
  ExchangeType exchangeType;
  address inToken;
  address inNFT;
  uint8 inObjectTypeId;
  uint256 inAmount;
  address outToken;
  address outNFT;
  uint8 outObjectTypeId;
  uint256 outAmount;
  uint256 outBalance;
}

library ExchangeChest {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "experience", name: "ExchangeChest", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657870657269656e63650000000045786368616e67654368657374000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00b30a0001141401201414012020000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, address, address, uint8, uint256, address, address, uint8, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00b30a00006161001f6161001f1f000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "exchangeType";
    fieldNames[1] = "inToken";
    fieldNames[2] = "inNFT";
    fieldNames[3] = "inObjectTypeId";
    fieldNames[4] = "inAmount";
    fieldNames[5] = "outToken";
    fieldNames[6] = "outNFT";
    fieldNames[7] = "outObjectTypeId";
    fieldNames[8] = "outAmount";
    fieldNames[9] = "outBalance";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get exchangeType.
   */
  function getExchangeType(bytes32 entityId) internal view returns (ExchangeType exchangeType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ExchangeType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get exchangeType.
   */
  function _getExchangeType(bytes32 entityId) internal view returns (ExchangeType exchangeType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ExchangeType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get exchangeType (using the specified store).
   */
  function getExchangeType(IStore _store, bytes32 entityId) internal view returns (ExchangeType exchangeType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ExchangeType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set exchangeType.
   */
  function setExchangeType(bytes32 entityId, ExchangeType exchangeType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(exchangeType)), _fieldLayout);
  }

  /**
   * @notice Set exchangeType.
   */
  function _setExchangeType(bytes32 entityId, ExchangeType exchangeType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(exchangeType)), _fieldLayout);
  }

  /**
   * @notice Set exchangeType (using the specified store).
   */
  function setExchangeType(IStore _store, bytes32 entityId, ExchangeType exchangeType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(exchangeType)), _fieldLayout);
  }

  /**
   * @notice Get inToken.
   */
  function getInToken(bytes32 entityId) internal view returns (address inToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get inToken.
   */
  function _getInToken(bytes32 entityId) internal view returns (address inToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get inToken (using the specified store).
   */
  function getInToken(IStore _store, bytes32 entityId) internal view returns (address inToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set inToken.
   */
  function setInToken(bytes32 entityId, address inToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inToken)), _fieldLayout);
  }

  /**
   * @notice Set inToken.
   */
  function _setInToken(bytes32 entityId, address inToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inToken)), _fieldLayout);
  }

  /**
   * @notice Set inToken (using the specified store).
   */
  function setInToken(IStore _store, bytes32 entityId, address inToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((inToken)), _fieldLayout);
  }

  /**
   * @notice Get inNFT.
   */
  function getInNFT(bytes32 entityId) internal view returns (address inNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get inNFT.
   */
  function _getInNFT(bytes32 entityId) internal view returns (address inNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get inNFT (using the specified store).
   */
  function getInNFT(IStore _store, bytes32 entityId) internal view returns (address inNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set inNFT.
   */
  function setInNFT(bytes32 entityId, address inNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inNFT)), _fieldLayout);
  }

  /**
   * @notice Set inNFT.
   */
  function _setInNFT(bytes32 entityId, address inNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inNFT)), _fieldLayout);
  }

  /**
   * @notice Set inNFT (using the specified store).
   */
  function setInNFT(IStore _store, bytes32 entityId, address inNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((inNFT)), _fieldLayout);
  }

  /**
   * @notice Get inObjectTypeId.
   */
  function getInObjectTypeId(bytes32 entityId) internal view returns (uint8 inObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get inObjectTypeId.
   */
  function _getInObjectTypeId(bytes32 entityId) internal view returns (uint8 inObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get inObjectTypeId (using the specified store).
   */
  function getInObjectTypeId(IStore _store, bytes32 entityId) internal view returns (uint8 inObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set inObjectTypeId.
   */
  function setInObjectTypeId(bytes32 entityId, uint8 inObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set inObjectTypeId.
   */
  function _setInObjectTypeId(bytes32 entityId, uint8 inObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set inObjectTypeId (using the specified store).
   */
  function setInObjectTypeId(IStore _store, bytes32 entityId, uint8 inObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((inObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Get inAmount.
   */
  function getInAmount(bytes32 entityId) internal view returns (uint256 inAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inAmount.
   */
  function _getInAmount(bytes32 entityId) internal view returns (uint256 inAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get inAmount (using the specified store).
   */
  function getInAmount(IStore _store, bytes32 entityId) internal view returns (uint256 inAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set inAmount.
   */
  function setInAmount(bytes32 entityId, uint256 inAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((inAmount)), _fieldLayout);
  }

  /**
   * @notice Set inAmount.
   */
  function _setInAmount(bytes32 entityId, uint256 inAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((inAmount)), _fieldLayout);
  }

  /**
   * @notice Set inAmount (using the specified store).
   */
  function setInAmount(IStore _store, bytes32 entityId, uint256 inAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((inAmount)), _fieldLayout);
  }

  /**
   * @notice Get outToken.
   */
  function getOutToken(bytes32 entityId) internal view returns (address outToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get outToken.
   */
  function _getOutToken(bytes32 entityId) internal view returns (address outToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get outToken (using the specified store).
   */
  function getOutToken(IStore _store, bytes32 entityId) internal view returns (address outToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set outToken.
   */
  function setOutToken(bytes32 entityId, address outToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outToken)), _fieldLayout);
  }

  /**
   * @notice Set outToken.
   */
  function _setOutToken(bytes32 entityId, address outToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outToken)), _fieldLayout);
  }

  /**
   * @notice Set outToken (using the specified store).
   */
  function setOutToken(IStore _store, bytes32 entityId, address outToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((outToken)), _fieldLayout);
  }

  /**
   * @notice Get outNFT.
   */
  function getOutNFT(bytes32 entityId) internal view returns (address outNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get outNFT.
   */
  function _getOutNFT(bytes32 entityId) internal view returns (address outNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get outNFT (using the specified store).
   */
  function getOutNFT(IStore _store, bytes32 entityId) internal view returns (address outNFT) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set outNFT.
   */
  function setOutNFT(bytes32 entityId, address outNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outNFT)), _fieldLayout);
  }

  /**
   * @notice Set outNFT.
   */
  function _setOutNFT(bytes32 entityId, address outNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outNFT)), _fieldLayout);
  }

  /**
   * @notice Set outNFT (using the specified store).
   */
  function setOutNFT(IStore _store, bytes32 entityId, address outNFT) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((outNFT)), _fieldLayout);
  }

  /**
   * @notice Get outObjectTypeId.
   */
  function getOutObjectTypeId(bytes32 entityId) internal view returns (uint8 outObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get outObjectTypeId.
   */
  function _getOutObjectTypeId(bytes32 entityId) internal view returns (uint8 outObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get outObjectTypeId (using the specified store).
   */
  function getOutObjectTypeId(IStore _store, bytes32 entityId) internal view returns (uint8 outObjectTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set outObjectTypeId.
   */
  function setOutObjectTypeId(bytes32 entityId, uint8 outObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set outObjectTypeId.
   */
  function _setOutObjectTypeId(bytes32 entityId, uint8 outObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Set outObjectTypeId (using the specified store).
   */
  function setOutObjectTypeId(IStore _store, bytes32 entityId, uint8 outObjectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((outObjectTypeId)), _fieldLayout);
  }

  /**
   * @notice Get outAmount.
   */
  function getOutAmount(bytes32 entityId) internal view returns (uint256 outAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outAmount.
   */
  function _getOutAmount(bytes32 entityId) internal view returns (uint256 outAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outAmount (using the specified store).
   */
  function getOutAmount(IStore _store, bytes32 entityId) internal view returns (uint256 outAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set outAmount.
   */
  function setOutAmount(bytes32 entityId, uint256 outAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((outAmount)), _fieldLayout);
  }

  /**
   * @notice Set outAmount.
   */
  function _setOutAmount(bytes32 entityId, uint256 outAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((outAmount)), _fieldLayout);
  }

  /**
   * @notice Set outAmount (using the specified store).
   */
  function setOutAmount(IStore _store, bytes32 entityId, uint256 outAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((outAmount)), _fieldLayout);
  }

  /**
   * @notice Get outBalance.
   */
  function getOutBalance(bytes32 entityId) internal view returns (uint256 outBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outBalance.
   */
  function _getOutBalance(bytes32 entityId) internal view returns (uint256 outBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get outBalance (using the specified store).
   */
  function getOutBalance(IStore _store, bytes32 entityId) internal view returns (uint256 outBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set outBalance.
   */
  function setOutBalance(bytes32 entityId, uint256 outBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((outBalance)), _fieldLayout);
  }

  /**
   * @notice Set outBalance.
   */
  function _setOutBalance(bytes32 entityId, uint256 outBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((outBalance)), _fieldLayout);
  }

  /**
   * @notice Set outBalance (using the specified store).
   */
  function setOutBalance(IStore _store, bytes32 entityId, uint256 outBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((outBalance)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entityId) internal view returns (ExchangeChestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entityId) internal view returns (ExchangeChestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, bytes32 entityId) internal view returns (ExchangeChestData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entityId,
    ExchangeType exchangeType,
    address inToken,
    address inNFT,
    uint8 inObjectTypeId,
    uint256 inAmount,
    address outToken,
    address outNFT,
    uint8 outObjectTypeId,
    uint256 outAmount,
    uint256 outBalance
  ) internal {
    bytes memory _staticData = encodeStatic(
      exchangeType,
      inToken,
      inNFT,
      inObjectTypeId,
      inAmount,
      outToken,
      outNFT,
      outObjectTypeId,
      outAmount,
      outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entityId,
    ExchangeType exchangeType,
    address inToken,
    address inNFT,
    uint8 inObjectTypeId,
    uint256 inAmount,
    address outToken,
    address outNFT,
    uint8 outObjectTypeId,
    uint256 outAmount,
    uint256 outBalance
  ) internal {
    bytes memory _staticData = encodeStatic(
      exchangeType,
      inToken,
      inNFT,
      inObjectTypeId,
      inAmount,
      outToken,
      outNFT,
      outObjectTypeId,
      outAmount,
      outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 entityId,
    ExchangeType exchangeType,
    address inToken,
    address inNFT,
    uint8 inObjectTypeId,
    uint256 inAmount,
    address outToken,
    address outNFT,
    uint8 outObjectTypeId,
    uint256 outAmount,
    uint256 outBalance
  ) internal {
    bytes memory _staticData = encodeStatic(
      exchangeType,
      inToken,
      inNFT,
      inObjectTypeId,
      inAmount,
      outToken,
      outNFT,
      outObjectTypeId,
      outAmount,
      outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entityId, ExchangeChestData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.exchangeType,
      _table.inToken,
      _table.inNFT,
      _table.inObjectTypeId,
      _table.inAmount,
      _table.outToken,
      _table.outNFT,
      _table.outObjectTypeId,
      _table.outAmount,
      _table.outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entityId, ExchangeChestData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.exchangeType,
      _table.inToken,
      _table.inNFT,
      _table.inObjectTypeId,
      _table.inAmount,
      _table.outToken,
      _table.outNFT,
      _table.outObjectTypeId,
      _table.outAmount,
      _table.outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 entityId, ExchangeChestData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.exchangeType,
      _table.inToken,
      _table.inNFT,
      _table.inObjectTypeId,
      _table.inAmount,
      _table.outToken,
      _table.outNFT,
      _table.outObjectTypeId,
      _table.outAmount,
      _table.outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ExchangeType exchangeType,
      address inToken,
      address inNFT,
      uint8 inObjectTypeId,
      uint256 inAmount,
      address outToken,
      address outNFT,
      uint8 outObjectTypeId,
      uint256 outAmount,
      uint256 outBalance
    )
  {
    exchangeType = ExchangeType(uint8(Bytes.getBytes1(_blob, 0)));

    inToken = (address(Bytes.getBytes20(_blob, 1)));

    inNFT = (address(Bytes.getBytes20(_blob, 21)));

    inObjectTypeId = (uint8(Bytes.getBytes1(_blob, 41)));

    inAmount = (uint256(Bytes.getBytes32(_blob, 42)));

    outToken = (address(Bytes.getBytes20(_blob, 74)));

    outNFT = (address(Bytes.getBytes20(_blob, 94)));

    outObjectTypeId = (uint8(Bytes.getBytes1(_blob, 114)));

    outAmount = (uint256(Bytes.getBytes32(_blob, 115)));

    outBalance = (uint256(Bytes.getBytes32(_blob, 147)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ExchangeChestData memory _table) {
    (
      _table.exchangeType,
      _table.inToken,
      _table.inNFT,
      _table.inObjectTypeId,
      _table.inAmount,
      _table.outToken,
      _table.outNFT,
      _table.outObjectTypeId,
      _table.outAmount,
      _table.outBalance
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ExchangeType exchangeType,
    address inToken,
    address inNFT,
    uint8 inObjectTypeId,
    uint256 inAmount,
    address outToken,
    address outNFT,
    uint8 outObjectTypeId,
    uint256 outAmount,
    uint256 outBalance
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        exchangeType,
        inToken,
        inNFT,
        inObjectTypeId,
        inAmount,
        outToken,
        outNFT,
        outObjectTypeId,
        outAmount,
        outBalance
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ExchangeType exchangeType,
    address inToken,
    address inNFT,
    uint8 inObjectTypeId,
    uint256 inAmount,
    address outToken,
    address outNFT,
    uint8 outObjectTypeId,
    uint256 outAmount,
    uint256 outBalance
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      exchangeType,
      inToken,
      inNFT,
      inObjectTypeId,
      inAmount,
      outToken,
      outNFT,
      outObjectTypeId,
      outAmount,
      outBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    return _keyTuple;
  }
}
